/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_UpdateResult.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


UpdateResult::~UpdateResult() noexcept {
}


void UpdateResult::__set_updateCount(const int32_t val) {
  this->updateCount = val;
__isset.updateCount = true;
}

void UpdateResult::__set_batchUpdateCounts(const std::vector<int32_t> & val) {
  this->batchUpdateCounts = val;
__isset.batchUpdateCounts = true;
}

void UpdateResult::__set_generatedKeys(const RowSet& val) {
  this->generatedKeys = val;
__isset.generatedKeys = true;
}

void UpdateResult::__set_newDefaultSchema(const std::string& val) {
  this->newDefaultSchema = val;
__isset.newDefaultSchema = true;
}

void UpdateResult::__set_warnings(const SnappyExceptionData& val) {
  this->warnings = val;
__isset.warnings = true;
}

uint32_t UpdateResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updateCount);
          this->__isset.updateCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->batchUpdateCounts.clear();
            uint32_t _size267;
            ::apache::thrift::protocol::TType _etype270;
            xfer += iprot->readListBegin(_etype270, _size267);
            this->batchUpdateCounts.resize(_size267);
            uint32_t _i271;
            for (_i271 = 0; _i271 < _size267; ++_i271)
            {
              xfer += iprot->readI32(this->batchUpdateCounts[_i271]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.batchUpdateCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->generatedKeys.read(iprot);
          this->__isset.generatedKeys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newDefaultSchema);
          this->__isset.newDefaultSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->warnings.read(iprot);
          this->__isset.warnings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpdateResult");

  if (this->__isset.updateCount) {
    xfer += oprot->writeFieldBegin("updateCount", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->updateCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.batchUpdateCounts) {
    xfer += oprot->writeFieldBegin("batchUpdateCounts", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->batchUpdateCounts.size()));
      std::vector<int32_t> ::const_iterator _iter272;
      for (_iter272 = this->batchUpdateCounts.begin(); _iter272 != this->batchUpdateCounts.end(); ++_iter272)
      {
        xfer += oprot->writeI32((*_iter272));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.generatedKeys) {
    xfer += oprot->writeFieldBegin("generatedKeys", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->generatedKeys.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newDefaultSchema) {
    xfer += oprot->writeFieldBegin("newDefaultSchema", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->newDefaultSchema);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.warnings) {
    xfer += oprot->writeFieldBegin("warnings", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->warnings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateResult &a, UpdateResult &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.updateCount, b.updateCount);
  swap(a.batchUpdateCounts, b.batchUpdateCounts);
  swap(a.generatedKeys, b.generatedKeys);
  swap(a.newDefaultSchema, b.newDefaultSchema);
  swap(a.warnings, b.warnings);
  swap(a.__isset, b.__isset);
}

UpdateResult::UpdateResult(const UpdateResult& other273) {
  updateCount = other273.updateCount;
  batchUpdateCounts = other273.batchUpdateCounts;
  generatedKeys = other273.generatedKeys;
  newDefaultSchema = other273.newDefaultSchema;
  warnings = other273.warnings;
  __isset = other273.__isset;
}
UpdateResult::UpdateResult( UpdateResult&& other274) noexcept {
  updateCount = std::move(other274.updateCount);
  batchUpdateCounts = std::move(other274.batchUpdateCounts);
  generatedKeys = std::move(other274.generatedKeys);
  newDefaultSchema = std::move(other274.newDefaultSchema);
  warnings = std::move(other274.warnings);
  __isset = std::move(other274.__isset);
}
UpdateResult& UpdateResult::operator=(const UpdateResult& other275) {
  updateCount = other275.updateCount;
  batchUpdateCounts = other275.batchUpdateCounts;
  generatedKeys = other275.generatedKeys;
  newDefaultSchema = other275.newDefaultSchema;
  warnings = other275.warnings;
  __isset = other275.__isset;
  return *this;
}
UpdateResult& UpdateResult::operator=(UpdateResult&& other276) noexcept {
  updateCount = std::move(other276.updateCount);
  batchUpdateCounts = std::move(other276.batchUpdateCounts);
  generatedKeys = std::move(other276.generatedKeys);
  newDefaultSchema = std::move(other276.newDefaultSchema);
  warnings = std::move(other276.warnings);
  __isset = std::move(other276.__isset);
  return *this;
}
void UpdateResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateResult(";
  out << "updateCount="; (__isset.updateCount ? (out << to_string(updateCount)) : (out << "<null>"));
  out << ", " << "batchUpdateCounts="; (__isset.batchUpdateCounts ? (out << to_string(batchUpdateCounts)) : (out << "<null>"));
  out << ", " << "generatedKeys="; (__isset.generatedKeys ? (out << to_string(generatedKeys)) : (out << "<null>"));
  out << ", " << "newDefaultSchema="; (__isset.newDefaultSchema ? (out << to_string(newDefaultSchema)) : (out << "<null>"));
  out << ", " << "warnings="; (__isset.warnings ? (out << to_string(warnings)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
