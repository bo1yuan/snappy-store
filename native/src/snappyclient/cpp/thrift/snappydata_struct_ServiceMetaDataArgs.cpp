/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_ServiceMetaDataArgs.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


ServiceMetaDataArgs::~ServiceMetaDataArgs() noexcept {
}


void ServiceMetaDataArgs::__set_connId(const int64_t val) {
  this->connId = val;
}

void ServiceMetaDataArgs::__set_driverType(const int8_t val) {
  this->driverType = val;
}

void ServiceMetaDataArgs::__set_token(const std::string& val) {
  this->token = val;
}

void ServiceMetaDataArgs::__set_schema(const std::string& val) {
  this->schema = val;
__isset.schema = true;
}

void ServiceMetaDataArgs::__set_table(const std::string& val) {
  this->table = val;
__isset.table = true;
}

void ServiceMetaDataArgs::__set_tableTypes(const std::vector<std::string> & val) {
  this->tableTypes = val;
__isset.tableTypes = true;
}

void ServiceMetaDataArgs::__set_columnName(const std::string& val) {
  this->columnName = val;
__isset.columnName = true;
}

void ServiceMetaDataArgs::__set_foreignSchema(const std::string& val) {
  this->foreignSchema = val;
__isset.foreignSchema = true;
}

void ServiceMetaDataArgs::__set_foreignTable(const std::string& val) {
  this->foreignTable = val;
__isset.foreignTable = true;
}

void ServiceMetaDataArgs::__set_procedureName(const std::string& val) {
  this->procedureName = val;
__isset.procedureName = true;
}

void ServiceMetaDataArgs::__set_functionName(const std::string& val) {
  this->functionName = val;
__isset.functionName = true;
}

void ServiceMetaDataArgs::__set_attributeName(const std::string& val) {
  this->attributeName = val;
__isset.attributeName = true;
}

void ServiceMetaDataArgs::__set_typeName(const std::string& val) {
  this->typeName = val;
__isset.typeName = true;
}

void ServiceMetaDataArgs::__set_typeId(const SnappyType::type val) {
  this->typeId = val;
__isset.typeId = true;
}

uint32_t ServiceMetaDataArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_connId = false;
  bool isset_driverType = false;
  bool isset_token = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->connId);
          isset_connId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->driverType);
          isset_driverType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->token);
          isset_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->schema);
          this->__isset.schema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table);
          this->__isset.table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tableTypes.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            xfer += iprot->readListBegin(_etype103, _size100);
            this->tableTypes.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += iprot->readString(this->tableTypes[_i104]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tableTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->columnName);
          this->__isset.columnName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->foreignSchema);
          this->__isset.foreignSchema = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->foreignTable);
          this->__isset.foreignTable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->procedureName);
          this->__isset.procedureName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->functionName);
          this->__isset.functionName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attributeName);
          this->__isset.attributeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->typeName);
          this->__isset.typeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast105;
          xfer += iprot->readI32(ecast105);
          this->typeId = (SnappyType::type)ecast105;
          this->__isset.typeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_connId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_driverType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ServiceMetaDataArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceMetaDataArgs");

  xfer += oprot->writeFieldBegin("connId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->connId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->driverType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->token);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.schema) {
    xfer += oprot->writeFieldBegin("schema", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->schema);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.table) {
    xfer += oprot->writeFieldBegin("table", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->table);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tableTypes) {
    xfer += oprot->writeFieldBegin("tableTypes", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tableTypes.size()));
      std::vector<std::string> ::const_iterator _iter106;
      for (_iter106 = this->tableTypes.begin(); _iter106 != this->tableTypes.end(); ++_iter106)
      {
        xfer += oprot->writeString((*_iter106));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.columnName) {
    xfer += oprot->writeFieldBegin("columnName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->columnName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.foreignSchema) {
    xfer += oprot->writeFieldBegin("foreignSchema", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->foreignSchema);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.foreignTable) {
    xfer += oprot->writeFieldBegin("foreignTable", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->foreignTable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.procedureName) {
    xfer += oprot->writeFieldBegin("procedureName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->procedureName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.functionName) {
    xfer += oprot->writeFieldBegin("functionName", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->functionName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributeName) {
    xfer += oprot->writeFieldBegin("attributeName", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->attributeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.typeName) {
    xfer += oprot->writeFieldBegin("typeName", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->typeName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.typeId) {
    xfer += oprot->writeFieldBegin("typeId", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32((int32_t)this->typeId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceMetaDataArgs &a, ServiceMetaDataArgs &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.connId, b.connId);
  swap(a.driverType, b.driverType);
  swap(a.token, b.token);
  swap(a.schema, b.schema);
  swap(a.table, b.table);
  swap(a.tableTypes, b.tableTypes);
  swap(a.columnName, b.columnName);
  swap(a.foreignSchema, b.foreignSchema);
  swap(a.foreignTable, b.foreignTable);
  swap(a.procedureName, b.procedureName);
  swap(a.functionName, b.functionName);
  swap(a.attributeName, b.attributeName);
  swap(a.typeName, b.typeName);
  swap(a.typeId, b.typeId);
  swap(a.__isset, b.__isset);
}

ServiceMetaDataArgs::ServiceMetaDataArgs(const ServiceMetaDataArgs& other107) {
  connId = other107.connId;
  driverType = other107.driverType;
  token = other107.token;
  schema = other107.schema;
  table = other107.table;
  tableTypes = other107.tableTypes;
  columnName = other107.columnName;
  foreignSchema = other107.foreignSchema;
  foreignTable = other107.foreignTable;
  procedureName = other107.procedureName;
  functionName = other107.functionName;
  attributeName = other107.attributeName;
  typeName = other107.typeName;
  typeId = other107.typeId;
  __isset = other107.__isset;
}
ServiceMetaDataArgs::ServiceMetaDataArgs( ServiceMetaDataArgs&& other108) noexcept {
  connId = std::move(other108.connId);
  driverType = std::move(other108.driverType);
  token = std::move(other108.token);
  schema = std::move(other108.schema);
  table = std::move(other108.table);
  tableTypes = std::move(other108.tableTypes);
  columnName = std::move(other108.columnName);
  foreignSchema = std::move(other108.foreignSchema);
  foreignTable = std::move(other108.foreignTable);
  procedureName = std::move(other108.procedureName);
  functionName = std::move(other108.functionName);
  attributeName = std::move(other108.attributeName);
  typeName = std::move(other108.typeName);
  typeId = std::move(other108.typeId);
  __isset = std::move(other108.__isset);
}
ServiceMetaDataArgs& ServiceMetaDataArgs::operator=(const ServiceMetaDataArgs& other109) {
  connId = other109.connId;
  driverType = other109.driverType;
  token = other109.token;
  schema = other109.schema;
  table = other109.table;
  tableTypes = other109.tableTypes;
  columnName = other109.columnName;
  foreignSchema = other109.foreignSchema;
  foreignTable = other109.foreignTable;
  procedureName = other109.procedureName;
  functionName = other109.functionName;
  attributeName = other109.attributeName;
  typeName = other109.typeName;
  typeId = other109.typeId;
  __isset = other109.__isset;
  return *this;
}
ServiceMetaDataArgs& ServiceMetaDataArgs::operator=(ServiceMetaDataArgs&& other110) noexcept {
  connId = std::move(other110.connId);
  driverType = std::move(other110.driverType);
  token = std::move(other110.token);
  schema = std::move(other110.schema);
  table = std::move(other110.table);
  tableTypes = std::move(other110.tableTypes);
  columnName = std::move(other110.columnName);
  foreignSchema = std::move(other110.foreignSchema);
  foreignTable = std::move(other110.foreignTable);
  procedureName = std::move(other110.procedureName);
  functionName = std::move(other110.functionName);
  attributeName = std::move(other110.attributeName);
  typeName = std::move(other110.typeName);
  typeId = std::move(other110.typeId);
  __isset = std::move(other110.__isset);
  return *this;
}
void ServiceMetaDataArgs::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServiceMetaDataArgs(";
  out << "connId=" << to_string(connId);
  out << ", " << "driverType=" << to_string(driverType);
  out << ", " << "token=" << to_string(token);
  out << ", " << "schema="; (__isset.schema ? (out << to_string(schema)) : (out << "<null>"));
  out << ", " << "table="; (__isset.table ? (out << to_string(table)) : (out << "<null>"));
  out << ", " << "tableTypes="; (__isset.tableTypes ? (out << to_string(tableTypes)) : (out << "<null>"));
  out << ", " << "columnName="; (__isset.columnName ? (out << to_string(columnName)) : (out << "<null>"));
  out << ", " << "foreignSchema="; (__isset.foreignSchema ? (out << to_string(foreignSchema)) : (out << "<null>"));
  out << ", " << "foreignTable="; (__isset.foreignTable ? (out << to_string(foreignTable)) : (out << "<null>"));
  out << ", " << "procedureName="; (__isset.procedureName ? (out << to_string(procedureName)) : (out << "<null>"));
  out << ", " << "functionName="; (__isset.functionName ? (out << to_string(functionName)) : (out << "<null>"));
  out << ", " << "attributeName="; (__isset.attributeName ? (out << to_string(attributeName)) : (out << "<null>"));
  out << ", " << "typeName="; (__isset.typeName ? (out << to_string(typeName)) : (out << "<null>"));
  out << ", " << "typeId="; (__isset.typeId ? (out << to_string(typeId)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
