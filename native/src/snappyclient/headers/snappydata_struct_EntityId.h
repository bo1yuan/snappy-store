/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_ENTITYID_H
#define SNAPPYDATA_STRUCT_ENTITYID_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"
#include "snappydata_struct_OutputParameter.h"
#include "snappydata_struct_RowSet.h"
#include "snappydata_struct_PrepareResult.h"
#include "snappydata_struct_UpdateResult.h"
#include "snappydata_struct_StatementResult.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {


class EntityId {
 public:

  EntityId(const EntityId&);
  EntityId(EntityId&&) noexcept;
  EntityId& operator=(const EntityId&);
  EntityId& operator=(EntityId&&) noexcept;
  EntityId() : id(0), type(0), connId(0), token() {
  }

  virtual ~EntityId() noexcept;
  int64_t id;
  int8_t type;
  int64_t connId;
  std::string token;

  void __set_id(const int64_t val);

  void __set_type(const int8_t val);

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const EntityId & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const EntityId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EntityId &a, EntityId &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const EntityId& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
