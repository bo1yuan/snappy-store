/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SnappyDataService_H
#define SnappyDataService_H

#include <thrift/TDispatchProcessor.h>
#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_types.h"
#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"
#include "snappydata_struct_OutputParameter.h"
#include "snappydata_struct_RowSet.h"
#include "snappydata_struct_PrepareResult.h"
#include "snappydata_struct_UpdateResult.h"
#include "snappydata_struct_StatementResult.h"
#include "snappydata_struct_EntityId.h"

#include "snappydata_struct_SnappyException.h"


namespace io { namespace snappydata { namespace thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SnappyDataServiceIf {
 public:
  virtual ~SnappyDataServiceIf() {}
  virtual void getPreferredServer(HostAddress& _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) = 0;
  virtual void getAllServersWithPreferredServer(std::vector<HostAddress> & _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) = 0;
  virtual void openConnection(ConnectionProperties& _return, const OpenConnectionArgs& arguments) = 0;
  virtual void execute(StatementResult& _return, const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executeUpdate(UpdateResult& _return, const int64_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executeQuery(RowSet& _return, const int64_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void prepareStatement(PrepareResult& _return, const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executePrepared(StatementResult& _return, const int64_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executePreparedUpdate(UpdateResult& _return, const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executePreparedQuery(RowSet& _return, const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executePreparedBatch(UpdateResult& _return, const int64_t stmtId, const std::vector<Row> & paramsBatch, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void prepareAndExecute(StatementResult& _return, const int64_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual int8_t beginTransaction(const int64_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void setTransactionAttributes(const int64_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return, const int64_t connId, const std::string& token) = 0;
  virtual void commitTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void rollbackTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void getNextResultSet(RowSet& _return, const int64_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token) = 0;
  virtual void getBlobChunk(BlobChunk& _return, const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) = 0;
  virtual void getClobChunk(ClobChunk& _return, const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) = 0;
  virtual int64_t sendBlobChunk(const BlobChunk& chunk, const int64_t connId, const std::string& token) = 0;
  virtual int64_t sendClobChunk(const ClobChunk& chunk, const int64_t connId, const std::string& token) = 0;
  virtual void freeLob(const int64_t connId, const int64_t lobId, const std::string& token) = 0;
  virtual void scrollCursor(RowSet& _return, const int64_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token) = 0;
  virtual void executeCursorUpdate(const int64_t cursorId, const std::vector<CursorUpdateOperation::type> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token) = 0;
  virtual void startXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t timeoutInSeconds, const int32_t flags, const std::string& token) = 0;
  virtual int32_t prepareXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token) = 0;
  virtual void commitXATransaction(const int64_t connId, const TransactionXid& xid, const bool onePhase, const std::string& token) = 0;
  virtual void rollbackXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token) = 0;
  virtual void forgetXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token) = 0;
  virtual void endXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t flags, const std::string& token) = 0;
  virtual void recoverXATransaction(std::vector<TransactionXid> & _return, const int64_t connId, const int32_t flag, const std::string& token) = 0;
  virtual void getServiceMetaData(ServiceMetaData& _return, const int64_t connId, const std::string& token) = 0;
  virtual void getSchemaMetaData(RowSet& _return, const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs) = 0;
  virtual void getIndexInfo(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate) = 0;
  virtual void getUDTs(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const std::vector<SnappyType::type> & types) = 0;
  virtual void getBestRowIdentifier(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable) = 0;
  virtual void fetchActiveConnections(std::vector<ConnectionProperties> & _return, const int64_t connId, const std::string& token) = 0;
  virtual void fetchActiveStatements(std::map<int64_t, std::string> & _return, const int64_t connId, const std::string& token) = 0;
  virtual void cancelStatement(const int64_t stmtId, const std::string& token) = 0;
  virtual void cancelCurrentStatement(const int64_t connId, const std::string& token) = 0;
  virtual void closeResultSet(const int64_t cursorId, const std::string& token) = 0;
  virtual void closeStatement(const int64_t stmtId, const std::string& token) = 0;
  virtual void closeConnection(const int64_t connId, const bool closeSocket, const std::string& token) = 0;
  virtual void bulkClose(const std::vector<EntityId> & entities) = 0;
};

class SnappyDataServiceIfFactory {
 public:
  typedef SnappyDataServiceIf Handler;

  virtual ~SnappyDataServiceIfFactory() {}

  virtual SnappyDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SnappyDataServiceIf* /* handler */) = 0;
};

class SnappyDataServiceIfSingletonFactory : virtual public SnappyDataServiceIfFactory {
 public:
  SnappyDataServiceIfSingletonFactory(const boost::shared_ptr<SnappyDataServiceIf>& iface) : iface_(iface) {}
  virtual ~SnappyDataServiceIfSingletonFactory() {}

  virtual SnappyDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SnappyDataServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SnappyDataServiceIf> iface_;
};

class SnappyDataServiceNull : virtual public SnappyDataServiceIf {
 public:
  virtual ~SnappyDataServiceNull() {}
  void getPreferredServer(HostAddress& /* _return */, const std::set<ServerType::type> & /* serverTypes */, const std::set<std::string> & /* serverGroups */, const std::set<HostAddress> & /* failedServers */) {
    return;
  }
  void getAllServersWithPreferredServer(std::vector<HostAddress> & /* _return */, const std::set<ServerType::type> & /* serverTypes */, const std::set<std::string> & /* serverGroups */, const std::set<HostAddress> & /* failedServers */) {
    return;
  }
  void openConnection(ConnectionProperties& /* _return */, const OpenConnectionArgs& /* arguments */) {
    return;
  }
  void execute(StatementResult& /* _return */, const int64_t /* connId */, const std::string& /* sql */, const std::map<int32_t, OutputParameter> & /* outputParams */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executeUpdate(UpdateResult& /* _return */, const int64_t /* connId */, const std::vector<std::string> & /* sqls */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executeQuery(RowSet& /* _return */, const int64_t /* connId */, const std::string& /* sql */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void prepareStatement(PrepareResult& /* _return */, const int64_t /* connId */, const std::string& /* sql */, const std::map<int32_t, OutputParameter> & /* outputParams */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executePrepared(StatementResult& /* _return */, const int64_t /* stmtId */, const Row& /* params */, const std::map<int32_t, OutputParameter> & /* outputParams */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executePreparedUpdate(UpdateResult& /* _return */, const int64_t /* stmtId */, const Row& /* params */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executePreparedQuery(RowSet& /* _return */, const int64_t /* stmtId */, const Row& /* params */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executePreparedBatch(UpdateResult& /* _return */, const int64_t /* stmtId */, const std::vector<Row> & /* paramsBatch */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void prepareAndExecute(StatementResult& /* _return */, const int64_t /* connId */, const std::string& /* sql */, const std::vector<Row> & /* paramsBatch */, const std::map<int32_t, OutputParameter> & /* outputParams */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  int8_t beginTransaction(const int64_t /* connId */, const int8_t /* isolationLevel */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    int8_t _return = 0;
    return _return;
  }
  void setTransactionAttributes(const int64_t /* connId */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    return;
  }
  void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & /* _return */, const int64_t /* connId */, const std::string& /* token */) {
    return;
  }
  void commitTransaction(const int64_t /* connId */, const bool /* startNewTransaction */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    return;
  }
  void rollbackTransaction(const int64_t /* connId */, const bool /* startNewTransaction */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    return;
  }
  void getNextResultSet(RowSet& /* _return */, const int64_t /* cursorId */, const int8_t /* otherResultSetBehaviour */, const std::string& /* token */) {
    return;
  }
  void getBlobChunk(BlobChunk& /* _return */, const int64_t /* connId */, const int64_t /* lobId */, const int64_t /* offset */, const int32_t /* size */, const bool /* freeLobAtEnd */, const std::string& /* token */) {
    return;
  }
  void getClobChunk(ClobChunk& /* _return */, const int64_t /* connId */, const int64_t /* lobId */, const int64_t /* offset */, const int32_t /* size */, const bool /* freeLobAtEnd */, const std::string& /* token */) {
    return;
  }
  int64_t sendBlobChunk(const BlobChunk& /* chunk */, const int64_t /* connId */, const std::string& /* token */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t sendClobChunk(const ClobChunk& /* chunk */, const int64_t /* connId */, const std::string& /* token */) {
    int64_t _return = 0;
    return _return;
  }
  void freeLob(const int64_t /* connId */, const int64_t /* lobId */, const std::string& /* token */) {
    return;
  }
  void scrollCursor(RowSet& /* _return */, const int64_t /* cursorId */, const int32_t /* offset */, const bool /* offsetIsAbsolute */, const bool /* fetchReverse */, const int32_t /* fetchSize */, const std::string& /* token */) {
    return;
  }
  void executeCursorUpdate(const int64_t /* cursorId */, const std::vector<CursorUpdateOperation::type> & /* operations */, const std::vector<Row> & /* changedRows */, const std::vector<std::vector<int32_t> > & /* changedColumnsList */, const std::vector<int32_t> & /* changedRowIndexes */, const std::string& /* token */) {
    return;
  }
  void startXATransaction(const int64_t /* connId */, const TransactionXid& /* xid */, const int32_t /* timeoutInSeconds */, const int32_t /* flags */, const std::string& /* token */) {
    return;
  }
  int32_t prepareXATransaction(const int64_t /* connId */, const TransactionXid& /* xid */, const std::string& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  void commitXATransaction(const int64_t /* connId */, const TransactionXid& /* xid */, const bool /* onePhase */, const std::string& /* token */) {
    return;
  }
  void rollbackXATransaction(const int64_t /* connId */, const TransactionXid& /* xid */, const std::string& /* token */) {
    return;
  }
  void forgetXATransaction(const int64_t /* connId */, const TransactionXid& /* xid */, const std::string& /* token */) {
    return;
  }
  void endXATransaction(const int64_t /* connId */, const TransactionXid& /* xid */, const int32_t /* flags */, const std::string& /* token */) {
    return;
  }
  void recoverXATransaction(std::vector<TransactionXid> & /* _return */, const int64_t /* connId */, const int32_t /* flag */, const std::string& /* token */) {
    return;
  }
  void getServiceMetaData(ServiceMetaData& /* _return */, const int64_t /* connId */, const std::string& /* token */) {
    return;
  }
  void getSchemaMetaData(RowSet& /* _return */, const ServiceMetaDataCall::type /* schemaCall */, const ServiceMetaDataArgs& /* metadataArgs */) {
    return;
  }
  void getIndexInfo(RowSet& /* _return */, const ServiceMetaDataArgs& /* metadataArgs */, const bool /* unique */, const bool /* approximate */) {
    return;
  }
  void getUDTs(RowSet& /* _return */, const ServiceMetaDataArgs& /* metadataArgs */, const std::vector<SnappyType::type> & /* types */) {
    return;
  }
  void getBestRowIdentifier(RowSet& /* _return */, const ServiceMetaDataArgs& /* metadataArgs */, const int32_t /* scope */, const bool /* nullable */) {
    return;
  }
  void fetchActiveConnections(std::vector<ConnectionProperties> & /* _return */, const int64_t /* connId */, const std::string& /* token */) {
    return;
  }
  void fetchActiveStatements(std::map<int64_t, std::string> & /* _return */, const int64_t /* connId */, const std::string& /* token */) {
    return;
  }
  void cancelStatement(const int64_t /* stmtId */, const std::string& /* token */) {
    return;
  }
  void cancelCurrentStatement(const int64_t /* connId */, const std::string& /* token */) {
    return;
  }
  void closeResultSet(const int64_t /* cursorId */, const std::string& /* token */) {
    return;
  }
  void closeStatement(const int64_t /* stmtId */, const std::string& /* token */) {
    return;
  }
  void closeConnection(const int64_t /* connId */, const bool /* closeSocket */, const std::string& /* token */) {
    return;
  }
  void bulkClose(const std::vector<EntityId> & /* entities */) {
    return;
  }
};

typedef struct _SnappyDataService_getPreferredServer_args__isset {
  _SnappyDataService_getPreferredServer_args__isset() : serverTypes(false), serverGroups(false), failedServers(false) {}
  bool serverTypes :1;
  bool serverGroups :1;
  bool failedServers :1;
} _SnappyDataService_getPreferredServer_args__isset;

class SnappyDataService_getPreferredServer_args {
 public:

  SnappyDataService_getPreferredServer_args(const SnappyDataService_getPreferredServer_args&);
  SnappyDataService_getPreferredServer_args(SnappyDataService_getPreferredServer_args&&) noexcept;
  SnappyDataService_getPreferredServer_args& operator=(const SnappyDataService_getPreferredServer_args&);
  SnappyDataService_getPreferredServer_args& operator=(SnappyDataService_getPreferredServer_args&&) noexcept;
  SnappyDataService_getPreferredServer_args() {
  }

  virtual ~SnappyDataService_getPreferredServer_args() noexcept;
  std::set<ServerType::type>  serverTypes;
  std::set<std::string>  serverGroups;
  std::set<HostAddress>  failedServers;

  _SnappyDataService_getPreferredServer_args__isset __isset;

  void __set_serverTypes(const std::set<ServerType::type> & val);

  void __set_serverGroups(const std::set<std::string> & val);

  void __set_failedServers(const std::set<HostAddress> & val);

  bool operator == (const SnappyDataService_getPreferredServer_args & rhs) const
  {
    if (!(serverTypes == rhs.serverTypes))
      return false;
    if (!(serverGroups == rhs.serverGroups))
      return false;
    if (!(failedServers == rhs.failedServers))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getPreferredServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getPreferredServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getPreferredServer_pargs {
 public:


  virtual ~SnappyDataService_getPreferredServer_pargs() noexcept;
  const std::set<ServerType::type> * serverTypes;
  const std::set<std::string> * serverGroups;
  const std::set<HostAddress> * failedServers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getPreferredServer_result__isset {
  _SnappyDataService_getPreferredServer_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getPreferredServer_result__isset;

class SnappyDataService_getPreferredServer_result {
 public:

  SnappyDataService_getPreferredServer_result(const SnappyDataService_getPreferredServer_result&);
  SnappyDataService_getPreferredServer_result(SnappyDataService_getPreferredServer_result&&) noexcept;
  SnappyDataService_getPreferredServer_result& operator=(const SnappyDataService_getPreferredServer_result&);
  SnappyDataService_getPreferredServer_result& operator=(SnappyDataService_getPreferredServer_result&&) noexcept;
  SnappyDataService_getPreferredServer_result() {
  }

  virtual ~SnappyDataService_getPreferredServer_result() noexcept;
  HostAddress success;
  SnappyException error;

  _SnappyDataService_getPreferredServer_result__isset __isset;

  void __set_success(const HostAddress& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getPreferredServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getPreferredServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getPreferredServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getPreferredServer_presult__isset {
  _SnappyDataService_getPreferredServer_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getPreferredServer_presult__isset;

class SnappyDataService_getPreferredServer_presult {
 public:


  virtual ~SnappyDataService_getPreferredServer_presult() noexcept;
  HostAddress* success;
  SnappyException error;

  _SnappyDataService_getPreferredServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getAllServersWithPreferredServer_args__isset {
  _SnappyDataService_getAllServersWithPreferredServer_args__isset() : serverTypes(false), serverGroups(false), failedServers(false) {}
  bool serverTypes :1;
  bool serverGroups :1;
  bool failedServers :1;
} _SnappyDataService_getAllServersWithPreferredServer_args__isset;

class SnappyDataService_getAllServersWithPreferredServer_args {
 public:

  SnappyDataService_getAllServersWithPreferredServer_args(const SnappyDataService_getAllServersWithPreferredServer_args&);
  SnappyDataService_getAllServersWithPreferredServer_args(SnappyDataService_getAllServersWithPreferredServer_args&&) noexcept;
  SnappyDataService_getAllServersWithPreferredServer_args& operator=(const SnappyDataService_getAllServersWithPreferredServer_args&);
  SnappyDataService_getAllServersWithPreferredServer_args& operator=(SnappyDataService_getAllServersWithPreferredServer_args&&) noexcept;
  SnappyDataService_getAllServersWithPreferredServer_args() {
  }

  virtual ~SnappyDataService_getAllServersWithPreferredServer_args() noexcept;
  std::set<ServerType::type>  serverTypes;
  std::set<std::string>  serverGroups;
  std::set<HostAddress>  failedServers;

  _SnappyDataService_getAllServersWithPreferredServer_args__isset __isset;

  void __set_serverTypes(const std::set<ServerType::type> & val);

  void __set_serverGroups(const std::set<std::string> & val);

  void __set_failedServers(const std::set<HostAddress> & val);

  bool operator == (const SnappyDataService_getAllServersWithPreferredServer_args & rhs) const
  {
    if (!(serverTypes == rhs.serverTypes))
      return false;
    if (!(serverGroups == rhs.serverGroups))
      return false;
    if (!(failedServers == rhs.failedServers))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getAllServersWithPreferredServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getAllServersWithPreferredServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getAllServersWithPreferredServer_pargs {
 public:


  virtual ~SnappyDataService_getAllServersWithPreferredServer_pargs() noexcept;
  const std::set<ServerType::type> * serverTypes;
  const std::set<std::string> * serverGroups;
  const std::set<HostAddress> * failedServers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getAllServersWithPreferredServer_result__isset {
  _SnappyDataService_getAllServersWithPreferredServer_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getAllServersWithPreferredServer_result__isset;

class SnappyDataService_getAllServersWithPreferredServer_result {
 public:

  SnappyDataService_getAllServersWithPreferredServer_result(const SnappyDataService_getAllServersWithPreferredServer_result&);
  SnappyDataService_getAllServersWithPreferredServer_result(SnappyDataService_getAllServersWithPreferredServer_result&&) noexcept;
  SnappyDataService_getAllServersWithPreferredServer_result& operator=(const SnappyDataService_getAllServersWithPreferredServer_result&);
  SnappyDataService_getAllServersWithPreferredServer_result& operator=(SnappyDataService_getAllServersWithPreferredServer_result&&) noexcept;
  SnappyDataService_getAllServersWithPreferredServer_result() {
  }

  virtual ~SnappyDataService_getAllServersWithPreferredServer_result() noexcept;
  std::vector<HostAddress>  success;
  SnappyException error;

  _SnappyDataService_getAllServersWithPreferredServer_result__isset __isset;

  void __set_success(const std::vector<HostAddress> & val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getAllServersWithPreferredServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getAllServersWithPreferredServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getAllServersWithPreferredServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getAllServersWithPreferredServer_presult__isset {
  _SnappyDataService_getAllServersWithPreferredServer_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getAllServersWithPreferredServer_presult__isset;

class SnappyDataService_getAllServersWithPreferredServer_presult {
 public:


  virtual ~SnappyDataService_getAllServersWithPreferredServer_presult() noexcept;
  std::vector<HostAddress> * success;
  SnappyException error;

  _SnappyDataService_getAllServersWithPreferredServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_openConnection_args__isset {
  _SnappyDataService_openConnection_args__isset() : arguments(false) {}
  bool arguments :1;
} _SnappyDataService_openConnection_args__isset;

class SnappyDataService_openConnection_args {
 public:

  SnappyDataService_openConnection_args(const SnappyDataService_openConnection_args&);
  SnappyDataService_openConnection_args(SnappyDataService_openConnection_args&&) noexcept;
  SnappyDataService_openConnection_args& operator=(const SnappyDataService_openConnection_args&);
  SnappyDataService_openConnection_args& operator=(SnappyDataService_openConnection_args&&) noexcept;
  SnappyDataService_openConnection_args() {
  }

  virtual ~SnappyDataService_openConnection_args() noexcept;
  OpenConnectionArgs arguments;

  _SnappyDataService_openConnection_args__isset __isset;

  void __set_arguments(const OpenConnectionArgs& val);

  bool operator == (const SnappyDataService_openConnection_args & rhs) const
  {
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_openConnection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_openConnection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_openConnection_pargs {
 public:


  virtual ~SnappyDataService_openConnection_pargs() noexcept;
  const OpenConnectionArgs* arguments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_openConnection_result__isset {
  _SnappyDataService_openConnection_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_openConnection_result__isset;

class SnappyDataService_openConnection_result {
 public:

  SnappyDataService_openConnection_result(const SnappyDataService_openConnection_result&);
  SnappyDataService_openConnection_result(SnappyDataService_openConnection_result&&) noexcept;
  SnappyDataService_openConnection_result& operator=(const SnappyDataService_openConnection_result&);
  SnappyDataService_openConnection_result& operator=(SnappyDataService_openConnection_result&&) noexcept;
  SnappyDataService_openConnection_result() {
  }

  virtual ~SnappyDataService_openConnection_result() noexcept;
  ConnectionProperties success;
  SnappyException error;

  _SnappyDataService_openConnection_result__isset __isset;

  void __set_success(const ConnectionProperties& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_openConnection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_openConnection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_openConnection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_openConnection_presult__isset {
  _SnappyDataService_openConnection_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_openConnection_presult__isset;

class SnappyDataService_openConnection_presult {
 public:


  virtual ~SnappyDataService_openConnection_presult() noexcept;
  ConnectionProperties* success;
  SnappyException error;

  _SnappyDataService_openConnection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_execute_args__isset {
  _SnappyDataService_execute_args__isset() : connId(false), sql(false), outputParams(false), attrs(false), token(false) {}
  bool connId :1;
  bool sql :1;
  bool outputParams :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_execute_args__isset;

class SnappyDataService_execute_args {
 public:

  SnappyDataService_execute_args(const SnappyDataService_execute_args&);
  SnappyDataService_execute_args(SnappyDataService_execute_args&&) noexcept;
  SnappyDataService_execute_args& operator=(const SnappyDataService_execute_args&);
  SnappyDataService_execute_args& operator=(SnappyDataService_execute_args&&) noexcept;
  SnappyDataService_execute_args() : connId(0), sql(), token() {
  }

  virtual ~SnappyDataService_execute_args() noexcept;
  int64_t connId;
  std::string sql;
  std::map<int32_t, OutputParameter>  outputParams;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_execute_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_sql(const std::string& val);

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_execute_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_execute_pargs {
 public:


  virtual ~SnappyDataService_execute_pargs() noexcept;
  const int64_t* connId;
  const std::string* sql;
  const std::map<int32_t, OutputParameter> * outputParams;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_execute_result__isset {
  _SnappyDataService_execute_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_execute_result__isset;

class SnappyDataService_execute_result {
 public:

  SnappyDataService_execute_result(const SnappyDataService_execute_result&);
  SnappyDataService_execute_result(SnappyDataService_execute_result&&) noexcept;
  SnappyDataService_execute_result& operator=(const SnappyDataService_execute_result&);
  SnappyDataService_execute_result& operator=(SnappyDataService_execute_result&&) noexcept;
  SnappyDataService_execute_result() {
  }

  virtual ~SnappyDataService_execute_result() noexcept;
  StatementResult success;
  SnappyException error;

  _SnappyDataService_execute_result__isset __isset;

  void __set_success(const StatementResult& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_execute_presult__isset {
  _SnappyDataService_execute_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_execute_presult__isset;

class SnappyDataService_execute_presult {
 public:


  virtual ~SnappyDataService_execute_presult() noexcept;
  StatementResult* success;
  SnappyException error;

  _SnappyDataService_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_executeUpdate_args__isset {
  _SnappyDataService_executeUpdate_args__isset() : connId(false), sqls(false), attrs(false), token(false) {}
  bool connId :1;
  bool sqls :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_executeUpdate_args__isset;

class SnappyDataService_executeUpdate_args {
 public:

  SnappyDataService_executeUpdate_args(const SnappyDataService_executeUpdate_args&);
  SnappyDataService_executeUpdate_args(SnappyDataService_executeUpdate_args&&) noexcept;
  SnappyDataService_executeUpdate_args& operator=(const SnappyDataService_executeUpdate_args&);
  SnappyDataService_executeUpdate_args& operator=(SnappyDataService_executeUpdate_args&&) noexcept;
  SnappyDataService_executeUpdate_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_executeUpdate_args() noexcept;
  int64_t connId;
  std::vector<std::string>  sqls;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_executeUpdate_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_sqls(const std::vector<std::string> & val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_executeUpdate_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sqls == rhs.sqls))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executeUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executeUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_executeUpdate_pargs {
 public:


  virtual ~SnappyDataService_executeUpdate_pargs() noexcept;
  const int64_t* connId;
  const std::vector<std::string> * sqls;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executeUpdate_result__isset {
  _SnappyDataService_executeUpdate_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executeUpdate_result__isset;

class SnappyDataService_executeUpdate_result {
 public:

  SnappyDataService_executeUpdate_result(const SnappyDataService_executeUpdate_result&);
  SnappyDataService_executeUpdate_result(SnappyDataService_executeUpdate_result&&) noexcept;
  SnappyDataService_executeUpdate_result& operator=(const SnappyDataService_executeUpdate_result&);
  SnappyDataService_executeUpdate_result& operator=(SnappyDataService_executeUpdate_result&&) noexcept;
  SnappyDataService_executeUpdate_result() {
  }

  virtual ~SnappyDataService_executeUpdate_result() noexcept;
  UpdateResult success;
  SnappyException error;

  _SnappyDataService_executeUpdate_result__isset __isset;

  void __set_success(const UpdateResult& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_executeUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executeUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executeUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executeUpdate_presult__isset {
  _SnappyDataService_executeUpdate_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executeUpdate_presult__isset;

class SnappyDataService_executeUpdate_presult {
 public:


  virtual ~SnappyDataService_executeUpdate_presult() noexcept;
  UpdateResult* success;
  SnappyException error;

  _SnappyDataService_executeUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_executeQuery_args__isset {
  _SnappyDataService_executeQuery_args__isset() : connId(false), sql(false), attrs(false), token(false) {}
  bool connId :1;
  bool sql :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_executeQuery_args__isset;

class SnappyDataService_executeQuery_args {
 public:

  SnappyDataService_executeQuery_args(const SnappyDataService_executeQuery_args&);
  SnappyDataService_executeQuery_args(SnappyDataService_executeQuery_args&&) noexcept;
  SnappyDataService_executeQuery_args& operator=(const SnappyDataService_executeQuery_args&);
  SnappyDataService_executeQuery_args& operator=(SnappyDataService_executeQuery_args&&) noexcept;
  SnappyDataService_executeQuery_args() : connId(0), sql(), token() {
  }

  virtual ~SnappyDataService_executeQuery_args() noexcept;
  int64_t connId;
  std::string sql;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_executeQuery_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_sql(const std::string& val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_executeQuery_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executeQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executeQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_executeQuery_pargs {
 public:


  virtual ~SnappyDataService_executeQuery_pargs() noexcept;
  const int64_t* connId;
  const std::string* sql;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executeQuery_result__isset {
  _SnappyDataService_executeQuery_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executeQuery_result__isset;

class SnappyDataService_executeQuery_result {
 public:

  SnappyDataService_executeQuery_result(const SnappyDataService_executeQuery_result&);
  SnappyDataService_executeQuery_result(SnappyDataService_executeQuery_result&&) noexcept;
  SnappyDataService_executeQuery_result& operator=(const SnappyDataService_executeQuery_result&);
  SnappyDataService_executeQuery_result& operator=(SnappyDataService_executeQuery_result&&) noexcept;
  SnappyDataService_executeQuery_result() {
  }

  virtual ~SnappyDataService_executeQuery_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_executeQuery_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_executeQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executeQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executeQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executeQuery_presult__isset {
  _SnappyDataService_executeQuery_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executeQuery_presult__isset;

class SnappyDataService_executeQuery_presult {
 public:


  virtual ~SnappyDataService_executeQuery_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_executeQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_prepareStatement_args__isset {
  _SnappyDataService_prepareStatement_args__isset() : connId(false), sql(false), outputParams(false), attrs(false), token(false) {}
  bool connId :1;
  bool sql :1;
  bool outputParams :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_prepareStatement_args__isset;

class SnappyDataService_prepareStatement_args {
 public:

  SnappyDataService_prepareStatement_args(const SnappyDataService_prepareStatement_args&);
  SnappyDataService_prepareStatement_args(SnappyDataService_prepareStatement_args&&) noexcept;
  SnappyDataService_prepareStatement_args& operator=(const SnappyDataService_prepareStatement_args&);
  SnappyDataService_prepareStatement_args& operator=(SnappyDataService_prepareStatement_args&&) noexcept;
  SnappyDataService_prepareStatement_args() : connId(0), sql(), token() {
  }

  virtual ~SnappyDataService_prepareStatement_args() noexcept;
  int64_t connId;
  std::string sql;
  std::map<int32_t, OutputParameter>  outputParams;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_prepareStatement_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_sql(const std::string& val);

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_prepareStatement_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_prepareStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_prepareStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_prepareStatement_pargs {
 public:


  virtual ~SnappyDataService_prepareStatement_pargs() noexcept;
  const int64_t* connId;
  const std::string* sql;
  const std::map<int32_t, OutputParameter> * outputParams;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_prepareStatement_result__isset {
  _SnappyDataService_prepareStatement_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_prepareStatement_result__isset;

class SnappyDataService_prepareStatement_result {
 public:

  SnappyDataService_prepareStatement_result(const SnappyDataService_prepareStatement_result&);
  SnappyDataService_prepareStatement_result(SnappyDataService_prepareStatement_result&&) noexcept;
  SnappyDataService_prepareStatement_result& operator=(const SnappyDataService_prepareStatement_result&);
  SnappyDataService_prepareStatement_result& operator=(SnappyDataService_prepareStatement_result&&) noexcept;
  SnappyDataService_prepareStatement_result() {
  }

  virtual ~SnappyDataService_prepareStatement_result() noexcept;
  PrepareResult success;
  SnappyException error;

  _SnappyDataService_prepareStatement_result__isset __isset;

  void __set_success(const PrepareResult& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_prepareStatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_prepareStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_prepareStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_prepareStatement_presult__isset {
  _SnappyDataService_prepareStatement_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_prepareStatement_presult__isset;

class SnappyDataService_prepareStatement_presult {
 public:


  virtual ~SnappyDataService_prepareStatement_presult() noexcept;
  PrepareResult* success;
  SnappyException error;

  _SnappyDataService_prepareStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_executePrepared_args__isset {
  _SnappyDataService_executePrepared_args__isset() : stmtId(false), params(false), outputParams(false), attrs(false), token(false) {}
  bool stmtId :1;
  bool params :1;
  bool outputParams :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_executePrepared_args__isset;

class SnappyDataService_executePrepared_args {
 public:

  SnappyDataService_executePrepared_args(const SnappyDataService_executePrepared_args&);
  SnappyDataService_executePrepared_args(SnappyDataService_executePrepared_args&&) noexcept;
  SnappyDataService_executePrepared_args& operator=(const SnappyDataService_executePrepared_args&);
  SnappyDataService_executePrepared_args& operator=(SnappyDataService_executePrepared_args&&) noexcept;
  SnappyDataService_executePrepared_args() : stmtId(0), token() {
  }

  virtual ~SnappyDataService_executePrepared_args() noexcept;
  int64_t stmtId;
  Row params;
  std::map<int32_t, OutputParameter>  outputParams;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_executePrepared_args__isset __isset;

  void __set_stmtId(const int64_t val);

  void __set_params(const Row& val);

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_executePrepared_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePrepared_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePrepared_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_executePrepared_pargs {
 public:


  virtual ~SnappyDataService_executePrepared_pargs() noexcept;
  const int64_t* stmtId;
  const Row* params;
  const std::map<int32_t, OutputParameter> * outputParams;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePrepared_result__isset {
  _SnappyDataService_executePrepared_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePrepared_result__isset;

class SnappyDataService_executePrepared_result {
 public:

  SnappyDataService_executePrepared_result(const SnappyDataService_executePrepared_result&);
  SnappyDataService_executePrepared_result(SnappyDataService_executePrepared_result&&) noexcept;
  SnappyDataService_executePrepared_result& operator=(const SnappyDataService_executePrepared_result&);
  SnappyDataService_executePrepared_result& operator=(SnappyDataService_executePrepared_result&&) noexcept;
  SnappyDataService_executePrepared_result() {
  }

  virtual ~SnappyDataService_executePrepared_result() noexcept;
  StatementResult success;
  SnappyException error;

  _SnappyDataService_executePrepared_result__isset __isset;

  void __set_success(const StatementResult& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_executePrepared_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePrepared_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePrepared_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePrepared_presult__isset {
  _SnappyDataService_executePrepared_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePrepared_presult__isset;

class SnappyDataService_executePrepared_presult {
 public:


  virtual ~SnappyDataService_executePrepared_presult() noexcept;
  StatementResult* success;
  SnappyException error;

  _SnappyDataService_executePrepared_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_executePreparedUpdate_args__isset {
  _SnappyDataService_executePreparedUpdate_args__isset() : stmtId(false), params(false), attrs(false), token(false) {}
  bool stmtId :1;
  bool params :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_executePreparedUpdate_args__isset;

class SnappyDataService_executePreparedUpdate_args {
 public:

  SnappyDataService_executePreparedUpdate_args(const SnappyDataService_executePreparedUpdate_args&);
  SnappyDataService_executePreparedUpdate_args(SnappyDataService_executePreparedUpdate_args&&) noexcept;
  SnappyDataService_executePreparedUpdate_args& operator=(const SnappyDataService_executePreparedUpdate_args&);
  SnappyDataService_executePreparedUpdate_args& operator=(SnappyDataService_executePreparedUpdate_args&&) noexcept;
  SnappyDataService_executePreparedUpdate_args() : stmtId(0), token() {
  }

  virtual ~SnappyDataService_executePreparedUpdate_args() noexcept;
  int64_t stmtId;
  Row params;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_executePreparedUpdate_args__isset __isset;

  void __set_stmtId(const int64_t val);

  void __set_params(const Row& val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_executePreparedUpdate_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePreparedUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePreparedUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_executePreparedUpdate_pargs {
 public:


  virtual ~SnappyDataService_executePreparedUpdate_pargs() noexcept;
  const int64_t* stmtId;
  const Row* params;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePreparedUpdate_result__isset {
  _SnappyDataService_executePreparedUpdate_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePreparedUpdate_result__isset;

class SnappyDataService_executePreparedUpdate_result {
 public:

  SnappyDataService_executePreparedUpdate_result(const SnappyDataService_executePreparedUpdate_result&);
  SnappyDataService_executePreparedUpdate_result(SnappyDataService_executePreparedUpdate_result&&) noexcept;
  SnappyDataService_executePreparedUpdate_result& operator=(const SnappyDataService_executePreparedUpdate_result&);
  SnappyDataService_executePreparedUpdate_result& operator=(SnappyDataService_executePreparedUpdate_result&&) noexcept;
  SnappyDataService_executePreparedUpdate_result() {
  }

  virtual ~SnappyDataService_executePreparedUpdate_result() noexcept;
  UpdateResult success;
  SnappyException error;

  _SnappyDataService_executePreparedUpdate_result__isset __isset;

  void __set_success(const UpdateResult& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_executePreparedUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePreparedUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePreparedUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePreparedUpdate_presult__isset {
  _SnappyDataService_executePreparedUpdate_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePreparedUpdate_presult__isset;

class SnappyDataService_executePreparedUpdate_presult {
 public:


  virtual ~SnappyDataService_executePreparedUpdate_presult() noexcept;
  UpdateResult* success;
  SnappyException error;

  _SnappyDataService_executePreparedUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_executePreparedQuery_args__isset {
  _SnappyDataService_executePreparedQuery_args__isset() : stmtId(false), params(false), attrs(false), token(false) {}
  bool stmtId :1;
  bool params :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_executePreparedQuery_args__isset;

class SnappyDataService_executePreparedQuery_args {
 public:

  SnappyDataService_executePreparedQuery_args(const SnappyDataService_executePreparedQuery_args&);
  SnappyDataService_executePreparedQuery_args(SnappyDataService_executePreparedQuery_args&&) noexcept;
  SnappyDataService_executePreparedQuery_args& operator=(const SnappyDataService_executePreparedQuery_args&);
  SnappyDataService_executePreparedQuery_args& operator=(SnappyDataService_executePreparedQuery_args&&) noexcept;
  SnappyDataService_executePreparedQuery_args() : stmtId(0), token() {
  }

  virtual ~SnappyDataService_executePreparedQuery_args() noexcept;
  int64_t stmtId;
  Row params;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_executePreparedQuery_args__isset __isset;

  void __set_stmtId(const int64_t val);

  void __set_params(const Row& val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_executePreparedQuery_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePreparedQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePreparedQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_executePreparedQuery_pargs {
 public:


  virtual ~SnappyDataService_executePreparedQuery_pargs() noexcept;
  const int64_t* stmtId;
  const Row* params;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePreparedQuery_result__isset {
  _SnappyDataService_executePreparedQuery_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePreparedQuery_result__isset;

class SnappyDataService_executePreparedQuery_result {
 public:

  SnappyDataService_executePreparedQuery_result(const SnappyDataService_executePreparedQuery_result&);
  SnappyDataService_executePreparedQuery_result(SnappyDataService_executePreparedQuery_result&&) noexcept;
  SnappyDataService_executePreparedQuery_result& operator=(const SnappyDataService_executePreparedQuery_result&);
  SnappyDataService_executePreparedQuery_result& operator=(SnappyDataService_executePreparedQuery_result&&) noexcept;
  SnappyDataService_executePreparedQuery_result() {
  }

  virtual ~SnappyDataService_executePreparedQuery_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_executePreparedQuery_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_executePreparedQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePreparedQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePreparedQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePreparedQuery_presult__isset {
  _SnappyDataService_executePreparedQuery_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePreparedQuery_presult__isset;

class SnappyDataService_executePreparedQuery_presult {
 public:


  virtual ~SnappyDataService_executePreparedQuery_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_executePreparedQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_executePreparedBatch_args__isset {
  _SnappyDataService_executePreparedBatch_args__isset() : stmtId(false), paramsBatch(false), attrs(false), token(false) {}
  bool stmtId :1;
  bool paramsBatch :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_executePreparedBatch_args__isset;

class SnappyDataService_executePreparedBatch_args {
 public:

  SnappyDataService_executePreparedBatch_args(const SnappyDataService_executePreparedBatch_args&);
  SnappyDataService_executePreparedBatch_args(SnappyDataService_executePreparedBatch_args&&) noexcept;
  SnappyDataService_executePreparedBatch_args& operator=(const SnappyDataService_executePreparedBatch_args&);
  SnappyDataService_executePreparedBatch_args& operator=(SnappyDataService_executePreparedBatch_args&&) noexcept;
  SnappyDataService_executePreparedBatch_args() : stmtId(0), token() {
  }

  virtual ~SnappyDataService_executePreparedBatch_args() noexcept;
  int64_t stmtId;
  std::vector<Row>  paramsBatch;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_executePreparedBatch_args__isset __isset;

  void __set_stmtId(const int64_t val);

  void __set_paramsBatch(const std::vector<Row> & val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_executePreparedBatch_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(paramsBatch == rhs.paramsBatch))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePreparedBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePreparedBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_executePreparedBatch_pargs {
 public:


  virtual ~SnappyDataService_executePreparedBatch_pargs() noexcept;
  const int64_t* stmtId;
  const std::vector<Row> * paramsBatch;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePreparedBatch_result__isset {
  _SnappyDataService_executePreparedBatch_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePreparedBatch_result__isset;

class SnappyDataService_executePreparedBatch_result {
 public:

  SnappyDataService_executePreparedBatch_result(const SnappyDataService_executePreparedBatch_result&);
  SnappyDataService_executePreparedBatch_result(SnappyDataService_executePreparedBatch_result&&) noexcept;
  SnappyDataService_executePreparedBatch_result& operator=(const SnappyDataService_executePreparedBatch_result&);
  SnappyDataService_executePreparedBatch_result& operator=(SnappyDataService_executePreparedBatch_result&&) noexcept;
  SnappyDataService_executePreparedBatch_result() {
  }

  virtual ~SnappyDataService_executePreparedBatch_result() noexcept;
  UpdateResult success;
  SnappyException error;

  _SnappyDataService_executePreparedBatch_result__isset __isset;

  void __set_success(const UpdateResult& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_executePreparedBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executePreparedBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executePreparedBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executePreparedBatch_presult__isset {
  _SnappyDataService_executePreparedBatch_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_executePreparedBatch_presult__isset;

class SnappyDataService_executePreparedBatch_presult {
 public:


  virtual ~SnappyDataService_executePreparedBatch_presult() noexcept;
  UpdateResult* success;
  SnappyException error;

  _SnappyDataService_executePreparedBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_prepareAndExecute_args__isset {
  _SnappyDataService_prepareAndExecute_args__isset() : connId(false), sql(false), paramsBatch(false), outputParams(false), attrs(false), token(false) {}
  bool connId :1;
  bool sql :1;
  bool paramsBatch :1;
  bool outputParams :1;
  bool attrs :1;
  bool token :1;
} _SnappyDataService_prepareAndExecute_args__isset;

class SnappyDataService_prepareAndExecute_args {
 public:

  SnappyDataService_prepareAndExecute_args(const SnappyDataService_prepareAndExecute_args&);
  SnappyDataService_prepareAndExecute_args(SnappyDataService_prepareAndExecute_args&&) noexcept;
  SnappyDataService_prepareAndExecute_args& operator=(const SnappyDataService_prepareAndExecute_args&);
  SnappyDataService_prepareAndExecute_args& operator=(SnappyDataService_prepareAndExecute_args&&) noexcept;
  SnappyDataService_prepareAndExecute_args() : connId(0), sql(), token() {
  }

  virtual ~SnappyDataService_prepareAndExecute_args() noexcept;
  int64_t connId;
  std::string sql;
  std::vector<Row>  paramsBatch;
  std::map<int32_t, OutputParameter>  outputParams;
  StatementAttrs attrs;
  std::string token;

  _SnappyDataService_prepareAndExecute_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_sql(const std::string& val);

  void __set_paramsBatch(const std::vector<Row> & val);

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val);

  void __set_attrs(const StatementAttrs& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_prepareAndExecute_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(paramsBatch == rhs.paramsBatch))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_prepareAndExecute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_prepareAndExecute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_prepareAndExecute_pargs {
 public:


  virtual ~SnappyDataService_prepareAndExecute_pargs() noexcept;
  const int64_t* connId;
  const std::string* sql;
  const std::vector<Row> * paramsBatch;
  const std::map<int32_t, OutputParameter> * outputParams;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_prepareAndExecute_result__isset {
  _SnappyDataService_prepareAndExecute_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_prepareAndExecute_result__isset;

class SnappyDataService_prepareAndExecute_result {
 public:

  SnappyDataService_prepareAndExecute_result(const SnappyDataService_prepareAndExecute_result&);
  SnappyDataService_prepareAndExecute_result(SnappyDataService_prepareAndExecute_result&&) noexcept;
  SnappyDataService_prepareAndExecute_result& operator=(const SnappyDataService_prepareAndExecute_result&);
  SnappyDataService_prepareAndExecute_result& operator=(SnappyDataService_prepareAndExecute_result&&) noexcept;
  SnappyDataService_prepareAndExecute_result() {
  }

  virtual ~SnappyDataService_prepareAndExecute_result() noexcept;
  StatementResult success;
  SnappyException error;

  _SnappyDataService_prepareAndExecute_result__isset __isset;

  void __set_success(const StatementResult& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_prepareAndExecute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_prepareAndExecute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_prepareAndExecute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_prepareAndExecute_presult__isset {
  _SnappyDataService_prepareAndExecute_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_prepareAndExecute_presult__isset;

class SnappyDataService_prepareAndExecute_presult {
 public:


  virtual ~SnappyDataService_prepareAndExecute_presult() noexcept;
  StatementResult* success;
  SnappyException error;

  _SnappyDataService_prepareAndExecute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_beginTransaction_args__isset {
  _SnappyDataService_beginTransaction_args__isset() : connId(false), isolationLevel(false), flags(false), token(false) {}
  bool connId :1;
  bool isolationLevel :1;
  bool flags :1;
  bool token :1;
} _SnappyDataService_beginTransaction_args__isset;

class SnappyDataService_beginTransaction_args {
 public:

  SnappyDataService_beginTransaction_args(const SnappyDataService_beginTransaction_args&);
  SnappyDataService_beginTransaction_args(SnappyDataService_beginTransaction_args&&) noexcept;
  SnappyDataService_beginTransaction_args& operator=(const SnappyDataService_beginTransaction_args&);
  SnappyDataService_beginTransaction_args& operator=(SnappyDataService_beginTransaction_args&&) noexcept;
  SnappyDataService_beginTransaction_args() : connId(0), isolationLevel(0), token() {
  }

  virtual ~SnappyDataService_beginTransaction_args() noexcept;
  int64_t connId;
  int8_t isolationLevel;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _SnappyDataService_beginTransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_isolationLevel(const int8_t val);

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_beginTransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(isolationLevel == rhs.isolationLevel))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_beginTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_beginTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_beginTransaction_pargs {
 public:


  virtual ~SnappyDataService_beginTransaction_pargs() noexcept;
  const int64_t* connId;
  const int8_t* isolationLevel;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_beginTransaction_result__isset {
  _SnappyDataService_beginTransaction_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_beginTransaction_result__isset;

class SnappyDataService_beginTransaction_result {
 public:

  SnappyDataService_beginTransaction_result(const SnappyDataService_beginTransaction_result&);
  SnappyDataService_beginTransaction_result(SnappyDataService_beginTransaction_result&&) noexcept;
  SnappyDataService_beginTransaction_result& operator=(const SnappyDataService_beginTransaction_result&);
  SnappyDataService_beginTransaction_result& operator=(SnappyDataService_beginTransaction_result&&) noexcept;
  SnappyDataService_beginTransaction_result() : success(0) {
  }

  virtual ~SnappyDataService_beginTransaction_result() noexcept;
  int8_t success;
  SnappyException error;

  _SnappyDataService_beginTransaction_result__isset __isset;

  void __set_success(const int8_t val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_beginTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_beginTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_beginTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_beginTransaction_presult__isset {
  _SnappyDataService_beginTransaction_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_beginTransaction_presult__isset;

class SnappyDataService_beginTransaction_presult {
 public:


  virtual ~SnappyDataService_beginTransaction_presult() noexcept;
  int8_t* success;
  SnappyException error;

  _SnappyDataService_beginTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_setTransactionAttributes_args__isset {
  _SnappyDataService_setTransactionAttributes_args__isset() : connId(false), flags(false), token(false) {}
  bool connId :1;
  bool flags :1;
  bool token :1;
} _SnappyDataService_setTransactionAttributes_args__isset;

class SnappyDataService_setTransactionAttributes_args {
 public:

  SnappyDataService_setTransactionAttributes_args(const SnappyDataService_setTransactionAttributes_args&);
  SnappyDataService_setTransactionAttributes_args(SnappyDataService_setTransactionAttributes_args&&) noexcept;
  SnappyDataService_setTransactionAttributes_args& operator=(const SnappyDataService_setTransactionAttributes_args&);
  SnappyDataService_setTransactionAttributes_args& operator=(SnappyDataService_setTransactionAttributes_args&&) noexcept;
  SnappyDataService_setTransactionAttributes_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_setTransactionAttributes_args() noexcept;
  int64_t connId;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _SnappyDataService_setTransactionAttributes_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_setTransactionAttributes_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_setTransactionAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_setTransactionAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_setTransactionAttributes_pargs {
 public:


  virtual ~SnappyDataService_setTransactionAttributes_pargs() noexcept;
  const int64_t* connId;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_setTransactionAttributes_result__isset {
  _SnappyDataService_setTransactionAttributes_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_setTransactionAttributes_result__isset;

class SnappyDataService_setTransactionAttributes_result {
 public:

  SnappyDataService_setTransactionAttributes_result(const SnappyDataService_setTransactionAttributes_result&);
  SnappyDataService_setTransactionAttributes_result(SnappyDataService_setTransactionAttributes_result&&) noexcept;
  SnappyDataService_setTransactionAttributes_result& operator=(const SnappyDataService_setTransactionAttributes_result&);
  SnappyDataService_setTransactionAttributes_result& operator=(SnappyDataService_setTransactionAttributes_result&&) noexcept;
  SnappyDataService_setTransactionAttributes_result() {
  }

  virtual ~SnappyDataService_setTransactionAttributes_result() noexcept;
  SnappyException error;

  _SnappyDataService_setTransactionAttributes_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_setTransactionAttributes_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_setTransactionAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_setTransactionAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_setTransactionAttributes_presult__isset {
  _SnappyDataService_setTransactionAttributes_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_setTransactionAttributes_presult__isset;

class SnappyDataService_setTransactionAttributes_presult {
 public:


  virtual ~SnappyDataService_setTransactionAttributes_presult() noexcept;
  SnappyException error;

  _SnappyDataService_setTransactionAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getTransactionAttributes_args__isset {
  _SnappyDataService_getTransactionAttributes_args__isset() : connId(false), token(false) {}
  bool connId :1;
  bool token :1;
} _SnappyDataService_getTransactionAttributes_args__isset;

class SnappyDataService_getTransactionAttributes_args {
 public:

  SnappyDataService_getTransactionAttributes_args(const SnappyDataService_getTransactionAttributes_args&);
  SnappyDataService_getTransactionAttributes_args(SnappyDataService_getTransactionAttributes_args&&) noexcept;
  SnappyDataService_getTransactionAttributes_args& operator=(const SnappyDataService_getTransactionAttributes_args&);
  SnappyDataService_getTransactionAttributes_args& operator=(SnappyDataService_getTransactionAttributes_args&&) noexcept;
  SnappyDataService_getTransactionAttributes_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_getTransactionAttributes_args() noexcept;
  int64_t connId;
  std::string token;

  _SnappyDataService_getTransactionAttributes_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_getTransactionAttributes_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getTransactionAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getTransactionAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getTransactionAttributes_pargs {
 public:


  virtual ~SnappyDataService_getTransactionAttributes_pargs() noexcept;
  const int64_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getTransactionAttributes_result__isset {
  _SnappyDataService_getTransactionAttributes_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getTransactionAttributes_result__isset;

class SnappyDataService_getTransactionAttributes_result {
 public:

  SnappyDataService_getTransactionAttributes_result(const SnappyDataService_getTransactionAttributes_result&);
  SnappyDataService_getTransactionAttributes_result(SnappyDataService_getTransactionAttributes_result&&) noexcept;
  SnappyDataService_getTransactionAttributes_result& operator=(const SnappyDataService_getTransactionAttributes_result&);
  SnappyDataService_getTransactionAttributes_result& operator=(SnappyDataService_getTransactionAttributes_result&&) noexcept;
  SnappyDataService_getTransactionAttributes_result() {
  }

  virtual ~SnappyDataService_getTransactionAttributes_result() noexcept;
  std::map<TransactionAttribute::type, bool>  success;
  SnappyException error;

  _SnappyDataService_getTransactionAttributes_result__isset __isset;

  void __set_success(const std::map<TransactionAttribute::type, bool> & val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getTransactionAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getTransactionAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getTransactionAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getTransactionAttributes_presult__isset {
  _SnappyDataService_getTransactionAttributes_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getTransactionAttributes_presult__isset;

class SnappyDataService_getTransactionAttributes_presult {
 public:


  virtual ~SnappyDataService_getTransactionAttributes_presult() noexcept;
  std::map<TransactionAttribute::type, bool> * success;
  SnappyException error;

  _SnappyDataService_getTransactionAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_commitTransaction_args__isset {
  _SnappyDataService_commitTransaction_args__isset() : connId(false), startNewTransaction(false), flags(false), token(false) {}
  bool connId :1;
  bool startNewTransaction :1;
  bool flags :1;
  bool token :1;
} _SnappyDataService_commitTransaction_args__isset;

class SnappyDataService_commitTransaction_args {
 public:

  SnappyDataService_commitTransaction_args(const SnappyDataService_commitTransaction_args&);
  SnappyDataService_commitTransaction_args(SnappyDataService_commitTransaction_args&&) noexcept;
  SnappyDataService_commitTransaction_args& operator=(const SnappyDataService_commitTransaction_args&);
  SnappyDataService_commitTransaction_args& operator=(SnappyDataService_commitTransaction_args&&) noexcept;
  SnappyDataService_commitTransaction_args() : connId(0), startNewTransaction(0), token() {
  }

  virtual ~SnappyDataService_commitTransaction_args() noexcept;
  int64_t connId;
  bool startNewTransaction;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _SnappyDataService_commitTransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_startNewTransaction(const bool val);

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_commitTransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(startNewTransaction == rhs.startNewTransaction))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_commitTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_commitTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_commitTransaction_pargs {
 public:


  virtual ~SnappyDataService_commitTransaction_pargs() noexcept;
  const int64_t* connId;
  const bool* startNewTransaction;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_commitTransaction_result__isset {
  _SnappyDataService_commitTransaction_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_commitTransaction_result__isset;

class SnappyDataService_commitTransaction_result {
 public:

  SnappyDataService_commitTransaction_result(const SnappyDataService_commitTransaction_result&);
  SnappyDataService_commitTransaction_result(SnappyDataService_commitTransaction_result&&) noexcept;
  SnappyDataService_commitTransaction_result& operator=(const SnappyDataService_commitTransaction_result&);
  SnappyDataService_commitTransaction_result& operator=(SnappyDataService_commitTransaction_result&&) noexcept;
  SnappyDataService_commitTransaction_result() {
  }

  virtual ~SnappyDataService_commitTransaction_result() noexcept;
  SnappyException error;

  _SnappyDataService_commitTransaction_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_commitTransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_commitTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_commitTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_commitTransaction_presult__isset {
  _SnappyDataService_commitTransaction_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_commitTransaction_presult__isset;

class SnappyDataService_commitTransaction_presult {
 public:


  virtual ~SnappyDataService_commitTransaction_presult() noexcept;
  SnappyException error;

  _SnappyDataService_commitTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_rollbackTransaction_args__isset {
  _SnappyDataService_rollbackTransaction_args__isset() : connId(false), startNewTransaction(false), flags(false), token(false) {}
  bool connId :1;
  bool startNewTransaction :1;
  bool flags :1;
  bool token :1;
} _SnappyDataService_rollbackTransaction_args__isset;

class SnappyDataService_rollbackTransaction_args {
 public:

  SnappyDataService_rollbackTransaction_args(const SnappyDataService_rollbackTransaction_args&);
  SnappyDataService_rollbackTransaction_args(SnappyDataService_rollbackTransaction_args&&) noexcept;
  SnappyDataService_rollbackTransaction_args& operator=(const SnappyDataService_rollbackTransaction_args&);
  SnappyDataService_rollbackTransaction_args& operator=(SnappyDataService_rollbackTransaction_args&&) noexcept;
  SnappyDataService_rollbackTransaction_args() : connId(0), startNewTransaction(0), token() {
  }

  virtual ~SnappyDataService_rollbackTransaction_args() noexcept;
  int64_t connId;
  bool startNewTransaction;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _SnappyDataService_rollbackTransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_startNewTransaction(const bool val);

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_rollbackTransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(startNewTransaction == rhs.startNewTransaction))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_rollbackTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_rollbackTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_rollbackTransaction_pargs {
 public:


  virtual ~SnappyDataService_rollbackTransaction_pargs() noexcept;
  const int64_t* connId;
  const bool* startNewTransaction;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_rollbackTransaction_result__isset {
  _SnappyDataService_rollbackTransaction_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_rollbackTransaction_result__isset;

class SnappyDataService_rollbackTransaction_result {
 public:

  SnappyDataService_rollbackTransaction_result(const SnappyDataService_rollbackTransaction_result&);
  SnappyDataService_rollbackTransaction_result(SnappyDataService_rollbackTransaction_result&&) noexcept;
  SnappyDataService_rollbackTransaction_result& operator=(const SnappyDataService_rollbackTransaction_result&);
  SnappyDataService_rollbackTransaction_result& operator=(SnappyDataService_rollbackTransaction_result&&) noexcept;
  SnappyDataService_rollbackTransaction_result() {
  }

  virtual ~SnappyDataService_rollbackTransaction_result() noexcept;
  SnappyException error;

  _SnappyDataService_rollbackTransaction_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_rollbackTransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_rollbackTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_rollbackTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_rollbackTransaction_presult__isset {
  _SnappyDataService_rollbackTransaction_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_rollbackTransaction_presult__isset;

class SnappyDataService_rollbackTransaction_presult {
 public:


  virtual ~SnappyDataService_rollbackTransaction_presult() noexcept;
  SnappyException error;

  _SnappyDataService_rollbackTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getNextResultSet_args__isset {
  _SnappyDataService_getNextResultSet_args__isset() : cursorId(false), otherResultSetBehaviour(false), token(false) {}
  bool cursorId :1;
  bool otherResultSetBehaviour :1;
  bool token :1;
} _SnappyDataService_getNextResultSet_args__isset;

class SnappyDataService_getNextResultSet_args {
 public:

  SnappyDataService_getNextResultSet_args(const SnappyDataService_getNextResultSet_args&);
  SnappyDataService_getNextResultSet_args(SnappyDataService_getNextResultSet_args&&) noexcept;
  SnappyDataService_getNextResultSet_args& operator=(const SnappyDataService_getNextResultSet_args&);
  SnappyDataService_getNextResultSet_args& operator=(SnappyDataService_getNextResultSet_args&&) noexcept;
  SnappyDataService_getNextResultSet_args() : cursorId(0), otherResultSetBehaviour(0), token() {
  }

  virtual ~SnappyDataService_getNextResultSet_args() noexcept;
  int64_t cursorId;
  int8_t otherResultSetBehaviour;
  std::string token;

  _SnappyDataService_getNextResultSet_args__isset __isset;

  void __set_cursorId(const int64_t val);

  void __set_otherResultSetBehaviour(const int8_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_getNextResultSet_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(otherResultSetBehaviour == rhs.otherResultSetBehaviour))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getNextResultSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getNextResultSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getNextResultSet_pargs {
 public:


  virtual ~SnappyDataService_getNextResultSet_pargs() noexcept;
  const int64_t* cursorId;
  const int8_t* otherResultSetBehaviour;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getNextResultSet_result__isset {
  _SnappyDataService_getNextResultSet_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getNextResultSet_result__isset;

class SnappyDataService_getNextResultSet_result {
 public:

  SnappyDataService_getNextResultSet_result(const SnappyDataService_getNextResultSet_result&);
  SnappyDataService_getNextResultSet_result(SnappyDataService_getNextResultSet_result&&) noexcept;
  SnappyDataService_getNextResultSet_result& operator=(const SnappyDataService_getNextResultSet_result&);
  SnappyDataService_getNextResultSet_result& operator=(SnappyDataService_getNextResultSet_result&&) noexcept;
  SnappyDataService_getNextResultSet_result() {
  }

  virtual ~SnappyDataService_getNextResultSet_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_getNextResultSet_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getNextResultSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getNextResultSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getNextResultSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getNextResultSet_presult__isset {
  _SnappyDataService_getNextResultSet_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getNextResultSet_presult__isset;

class SnappyDataService_getNextResultSet_presult {
 public:


  virtual ~SnappyDataService_getNextResultSet_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_getNextResultSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getBlobChunk_args__isset {
  _SnappyDataService_getBlobChunk_args__isset() : connId(false), lobId(false), offset(false), size(false), freeLobAtEnd(false), token(false) {}
  bool connId :1;
  bool lobId :1;
  bool offset :1;
  bool size :1;
  bool freeLobAtEnd :1;
  bool token :1;
} _SnappyDataService_getBlobChunk_args__isset;

class SnappyDataService_getBlobChunk_args {
 public:

  SnappyDataService_getBlobChunk_args(const SnappyDataService_getBlobChunk_args&);
  SnappyDataService_getBlobChunk_args(SnappyDataService_getBlobChunk_args&&) noexcept;
  SnappyDataService_getBlobChunk_args& operator=(const SnappyDataService_getBlobChunk_args&);
  SnappyDataService_getBlobChunk_args& operator=(SnappyDataService_getBlobChunk_args&&) noexcept;
  SnappyDataService_getBlobChunk_args() : connId(0), lobId(0), offset(0), size(0), freeLobAtEnd(0), token() {
  }

  virtual ~SnappyDataService_getBlobChunk_args() noexcept;
  int64_t connId;
  int64_t lobId;
  int64_t offset;
  int32_t size;
  bool freeLobAtEnd;
  std::string token;

  _SnappyDataService_getBlobChunk_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_lobId(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_size(const int32_t val);

  void __set_freeLobAtEnd(const bool val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_getBlobChunk_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(lobId == rhs.lobId))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(freeLobAtEnd == rhs.freeLobAtEnd))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getBlobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getBlobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getBlobChunk_pargs {
 public:


  virtual ~SnappyDataService_getBlobChunk_pargs() noexcept;
  const int64_t* connId;
  const int64_t* lobId;
  const int64_t* offset;
  const int32_t* size;
  const bool* freeLobAtEnd;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getBlobChunk_result__isset {
  _SnappyDataService_getBlobChunk_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getBlobChunk_result__isset;

class SnappyDataService_getBlobChunk_result {
 public:

  SnappyDataService_getBlobChunk_result(const SnappyDataService_getBlobChunk_result&);
  SnappyDataService_getBlobChunk_result(SnappyDataService_getBlobChunk_result&&) noexcept;
  SnappyDataService_getBlobChunk_result& operator=(const SnappyDataService_getBlobChunk_result&);
  SnappyDataService_getBlobChunk_result& operator=(SnappyDataService_getBlobChunk_result&&) noexcept;
  SnappyDataService_getBlobChunk_result() {
  }

  virtual ~SnappyDataService_getBlobChunk_result() noexcept;
  BlobChunk success;
  SnappyException error;

  _SnappyDataService_getBlobChunk_result__isset __isset;

  void __set_success(const BlobChunk& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getBlobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getBlobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getBlobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getBlobChunk_presult__isset {
  _SnappyDataService_getBlobChunk_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getBlobChunk_presult__isset;

class SnappyDataService_getBlobChunk_presult {
 public:


  virtual ~SnappyDataService_getBlobChunk_presult() noexcept;
  BlobChunk* success;
  SnappyException error;

  _SnappyDataService_getBlobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getClobChunk_args__isset {
  _SnappyDataService_getClobChunk_args__isset() : connId(false), lobId(false), offset(false), size(false), freeLobAtEnd(false), token(false) {}
  bool connId :1;
  bool lobId :1;
  bool offset :1;
  bool size :1;
  bool freeLobAtEnd :1;
  bool token :1;
} _SnappyDataService_getClobChunk_args__isset;

class SnappyDataService_getClobChunk_args {
 public:

  SnappyDataService_getClobChunk_args(const SnappyDataService_getClobChunk_args&);
  SnappyDataService_getClobChunk_args(SnappyDataService_getClobChunk_args&&) noexcept;
  SnappyDataService_getClobChunk_args& operator=(const SnappyDataService_getClobChunk_args&);
  SnappyDataService_getClobChunk_args& operator=(SnappyDataService_getClobChunk_args&&) noexcept;
  SnappyDataService_getClobChunk_args() : connId(0), lobId(0), offset(0), size(0), freeLobAtEnd(0), token() {
  }

  virtual ~SnappyDataService_getClobChunk_args() noexcept;
  int64_t connId;
  int64_t lobId;
  int64_t offset;
  int32_t size;
  bool freeLobAtEnd;
  std::string token;

  _SnappyDataService_getClobChunk_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_lobId(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_size(const int32_t val);

  void __set_freeLobAtEnd(const bool val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_getClobChunk_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(lobId == rhs.lobId))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(freeLobAtEnd == rhs.freeLobAtEnd))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getClobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getClobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getClobChunk_pargs {
 public:


  virtual ~SnappyDataService_getClobChunk_pargs() noexcept;
  const int64_t* connId;
  const int64_t* lobId;
  const int64_t* offset;
  const int32_t* size;
  const bool* freeLobAtEnd;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getClobChunk_result__isset {
  _SnappyDataService_getClobChunk_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getClobChunk_result__isset;

class SnappyDataService_getClobChunk_result {
 public:

  SnappyDataService_getClobChunk_result(const SnappyDataService_getClobChunk_result&);
  SnappyDataService_getClobChunk_result(SnappyDataService_getClobChunk_result&&) noexcept;
  SnappyDataService_getClobChunk_result& operator=(const SnappyDataService_getClobChunk_result&);
  SnappyDataService_getClobChunk_result& operator=(SnappyDataService_getClobChunk_result&&) noexcept;
  SnappyDataService_getClobChunk_result() {
  }

  virtual ~SnappyDataService_getClobChunk_result() noexcept;
  ClobChunk success;
  SnappyException error;

  _SnappyDataService_getClobChunk_result__isset __isset;

  void __set_success(const ClobChunk& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getClobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getClobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getClobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getClobChunk_presult__isset {
  _SnappyDataService_getClobChunk_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getClobChunk_presult__isset;

class SnappyDataService_getClobChunk_presult {
 public:


  virtual ~SnappyDataService_getClobChunk_presult() noexcept;
  ClobChunk* success;
  SnappyException error;

  _SnappyDataService_getClobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_sendBlobChunk_args__isset {
  _SnappyDataService_sendBlobChunk_args__isset() : chunk(false), connId(false), token(false) {}
  bool chunk :1;
  bool connId :1;
  bool token :1;
} _SnappyDataService_sendBlobChunk_args__isset;

class SnappyDataService_sendBlobChunk_args {
 public:

  SnappyDataService_sendBlobChunk_args(const SnappyDataService_sendBlobChunk_args&);
  SnappyDataService_sendBlobChunk_args(SnappyDataService_sendBlobChunk_args&&) noexcept;
  SnappyDataService_sendBlobChunk_args& operator=(const SnappyDataService_sendBlobChunk_args&);
  SnappyDataService_sendBlobChunk_args& operator=(SnappyDataService_sendBlobChunk_args&&) noexcept;
  SnappyDataService_sendBlobChunk_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_sendBlobChunk_args() noexcept;
  BlobChunk chunk;
  int64_t connId;
  std::string token;

  _SnappyDataService_sendBlobChunk_args__isset __isset;

  void __set_chunk(const BlobChunk& val);

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_sendBlobChunk_args & rhs) const
  {
    if (!(chunk == rhs.chunk))
      return false;
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_sendBlobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_sendBlobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_sendBlobChunk_pargs {
 public:


  virtual ~SnappyDataService_sendBlobChunk_pargs() noexcept;
  const BlobChunk* chunk;
  const int64_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_sendBlobChunk_result__isset {
  _SnappyDataService_sendBlobChunk_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_sendBlobChunk_result__isset;

class SnappyDataService_sendBlobChunk_result {
 public:

  SnappyDataService_sendBlobChunk_result(const SnappyDataService_sendBlobChunk_result&);
  SnappyDataService_sendBlobChunk_result(SnappyDataService_sendBlobChunk_result&&) noexcept;
  SnappyDataService_sendBlobChunk_result& operator=(const SnappyDataService_sendBlobChunk_result&);
  SnappyDataService_sendBlobChunk_result& operator=(SnappyDataService_sendBlobChunk_result&&) noexcept;
  SnappyDataService_sendBlobChunk_result() : success(0) {
  }

  virtual ~SnappyDataService_sendBlobChunk_result() noexcept;
  int64_t success;
  SnappyException error;

  _SnappyDataService_sendBlobChunk_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_sendBlobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_sendBlobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_sendBlobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_sendBlobChunk_presult__isset {
  _SnappyDataService_sendBlobChunk_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_sendBlobChunk_presult__isset;

class SnappyDataService_sendBlobChunk_presult {
 public:


  virtual ~SnappyDataService_sendBlobChunk_presult() noexcept;
  int64_t* success;
  SnappyException error;

  _SnappyDataService_sendBlobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_sendClobChunk_args__isset {
  _SnappyDataService_sendClobChunk_args__isset() : chunk(false), connId(false), token(false) {}
  bool chunk :1;
  bool connId :1;
  bool token :1;
} _SnappyDataService_sendClobChunk_args__isset;

class SnappyDataService_sendClobChunk_args {
 public:

  SnappyDataService_sendClobChunk_args(const SnappyDataService_sendClobChunk_args&);
  SnappyDataService_sendClobChunk_args(SnappyDataService_sendClobChunk_args&&) noexcept;
  SnappyDataService_sendClobChunk_args& operator=(const SnappyDataService_sendClobChunk_args&);
  SnappyDataService_sendClobChunk_args& operator=(SnappyDataService_sendClobChunk_args&&) noexcept;
  SnappyDataService_sendClobChunk_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_sendClobChunk_args() noexcept;
  ClobChunk chunk;
  int64_t connId;
  std::string token;

  _SnappyDataService_sendClobChunk_args__isset __isset;

  void __set_chunk(const ClobChunk& val);

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_sendClobChunk_args & rhs) const
  {
    if (!(chunk == rhs.chunk))
      return false;
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_sendClobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_sendClobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_sendClobChunk_pargs {
 public:


  virtual ~SnappyDataService_sendClobChunk_pargs() noexcept;
  const ClobChunk* chunk;
  const int64_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_sendClobChunk_result__isset {
  _SnappyDataService_sendClobChunk_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_sendClobChunk_result__isset;

class SnappyDataService_sendClobChunk_result {
 public:

  SnappyDataService_sendClobChunk_result(const SnappyDataService_sendClobChunk_result&);
  SnappyDataService_sendClobChunk_result(SnappyDataService_sendClobChunk_result&&) noexcept;
  SnappyDataService_sendClobChunk_result& operator=(const SnappyDataService_sendClobChunk_result&);
  SnappyDataService_sendClobChunk_result& operator=(SnappyDataService_sendClobChunk_result&&) noexcept;
  SnappyDataService_sendClobChunk_result() : success(0) {
  }

  virtual ~SnappyDataService_sendClobChunk_result() noexcept;
  int64_t success;
  SnappyException error;

  _SnappyDataService_sendClobChunk_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_sendClobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_sendClobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_sendClobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_sendClobChunk_presult__isset {
  _SnappyDataService_sendClobChunk_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_sendClobChunk_presult__isset;

class SnappyDataService_sendClobChunk_presult {
 public:


  virtual ~SnappyDataService_sendClobChunk_presult() noexcept;
  int64_t* success;
  SnappyException error;

  _SnappyDataService_sendClobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_freeLob_args__isset {
  _SnappyDataService_freeLob_args__isset() : connId(false), lobId(false), token(false) {}
  bool connId :1;
  bool lobId :1;
  bool token :1;
} _SnappyDataService_freeLob_args__isset;

class SnappyDataService_freeLob_args {
 public:

  SnappyDataService_freeLob_args(const SnappyDataService_freeLob_args&);
  SnappyDataService_freeLob_args(SnappyDataService_freeLob_args&&) noexcept;
  SnappyDataService_freeLob_args& operator=(const SnappyDataService_freeLob_args&);
  SnappyDataService_freeLob_args& operator=(SnappyDataService_freeLob_args&&) noexcept;
  SnappyDataService_freeLob_args() : connId(0), lobId(0), token() {
  }

  virtual ~SnappyDataService_freeLob_args() noexcept;
  int64_t connId;
  int64_t lobId;
  std::string token;

  _SnappyDataService_freeLob_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_lobId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_freeLob_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(lobId == rhs.lobId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_freeLob_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_freeLob_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_freeLob_pargs {
 public:


  virtual ~SnappyDataService_freeLob_pargs() noexcept;
  const int64_t* connId;
  const int64_t* lobId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_freeLob_result__isset {
  _SnappyDataService_freeLob_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_freeLob_result__isset;

class SnappyDataService_freeLob_result {
 public:

  SnappyDataService_freeLob_result(const SnappyDataService_freeLob_result&);
  SnappyDataService_freeLob_result(SnappyDataService_freeLob_result&&) noexcept;
  SnappyDataService_freeLob_result& operator=(const SnappyDataService_freeLob_result&);
  SnappyDataService_freeLob_result& operator=(SnappyDataService_freeLob_result&&) noexcept;
  SnappyDataService_freeLob_result() {
  }

  virtual ~SnappyDataService_freeLob_result() noexcept;
  SnappyException error;

  _SnappyDataService_freeLob_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_freeLob_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_freeLob_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_freeLob_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_freeLob_presult__isset {
  _SnappyDataService_freeLob_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_freeLob_presult__isset;

class SnappyDataService_freeLob_presult {
 public:


  virtual ~SnappyDataService_freeLob_presult() noexcept;
  SnappyException error;

  _SnappyDataService_freeLob_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_scrollCursor_args__isset {
  _SnappyDataService_scrollCursor_args__isset() : cursorId(false), offset(false), offsetIsAbsolute(false), fetchReverse(false), fetchSize(false), token(false) {}
  bool cursorId :1;
  bool offset :1;
  bool offsetIsAbsolute :1;
  bool fetchReverse :1;
  bool fetchSize :1;
  bool token :1;
} _SnappyDataService_scrollCursor_args__isset;

class SnappyDataService_scrollCursor_args {
 public:

  SnappyDataService_scrollCursor_args(const SnappyDataService_scrollCursor_args&);
  SnappyDataService_scrollCursor_args(SnappyDataService_scrollCursor_args&&) noexcept;
  SnappyDataService_scrollCursor_args& operator=(const SnappyDataService_scrollCursor_args&);
  SnappyDataService_scrollCursor_args& operator=(SnappyDataService_scrollCursor_args&&) noexcept;
  SnappyDataService_scrollCursor_args() : cursorId(0), offset(0), offsetIsAbsolute(0), fetchReverse(0), fetchSize(0), token() {
  }

  virtual ~SnappyDataService_scrollCursor_args() noexcept;
  int64_t cursorId;
  int32_t offset;
  bool offsetIsAbsolute;
  bool fetchReverse;
  int32_t fetchSize;
  std::string token;

  _SnappyDataService_scrollCursor_args__isset __isset;

  void __set_cursorId(const int64_t val);

  void __set_offset(const int32_t val);

  void __set_offsetIsAbsolute(const bool val);

  void __set_fetchReverse(const bool val);

  void __set_fetchSize(const int32_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_scrollCursor_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(offsetIsAbsolute == rhs.offsetIsAbsolute))
      return false;
    if (!(fetchReverse == rhs.fetchReverse))
      return false;
    if (!(fetchSize == rhs.fetchSize))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_scrollCursor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_scrollCursor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_scrollCursor_pargs {
 public:


  virtual ~SnappyDataService_scrollCursor_pargs() noexcept;
  const int64_t* cursorId;
  const int32_t* offset;
  const bool* offsetIsAbsolute;
  const bool* fetchReverse;
  const int32_t* fetchSize;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_scrollCursor_result__isset {
  _SnappyDataService_scrollCursor_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_scrollCursor_result__isset;

class SnappyDataService_scrollCursor_result {
 public:

  SnappyDataService_scrollCursor_result(const SnappyDataService_scrollCursor_result&);
  SnappyDataService_scrollCursor_result(SnappyDataService_scrollCursor_result&&) noexcept;
  SnappyDataService_scrollCursor_result& operator=(const SnappyDataService_scrollCursor_result&);
  SnappyDataService_scrollCursor_result& operator=(SnappyDataService_scrollCursor_result&&) noexcept;
  SnappyDataService_scrollCursor_result() {
  }

  virtual ~SnappyDataService_scrollCursor_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_scrollCursor_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_scrollCursor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_scrollCursor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_scrollCursor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_scrollCursor_presult__isset {
  _SnappyDataService_scrollCursor_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_scrollCursor_presult__isset;

class SnappyDataService_scrollCursor_presult {
 public:


  virtual ~SnappyDataService_scrollCursor_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_scrollCursor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_executeCursorUpdate_args__isset {
  _SnappyDataService_executeCursorUpdate_args__isset() : cursorId(false), operations(false), changedRows(false), changedColumnsList(false), changedRowIndexes(false), token(false) {}
  bool cursorId :1;
  bool operations :1;
  bool changedRows :1;
  bool changedColumnsList :1;
  bool changedRowIndexes :1;
  bool token :1;
} _SnappyDataService_executeCursorUpdate_args__isset;

class SnappyDataService_executeCursorUpdate_args {
 public:

  SnappyDataService_executeCursorUpdate_args(const SnappyDataService_executeCursorUpdate_args&);
  SnappyDataService_executeCursorUpdate_args(SnappyDataService_executeCursorUpdate_args&&) noexcept;
  SnappyDataService_executeCursorUpdate_args& operator=(const SnappyDataService_executeCursorUpdate_args&);
  SnappyDataService_executeCursorUpdate_args& operator=(SnappyDataService_executeCursorUpdate_args&&) noexcept;
  SnappyDataService_executeCursorUpdate_args() : cursorId(0), token() {
  }

  virtual ~SnappyDataService_executeCursorUpdate_args() noexcept;
  int64_t cursorId;
  std::vector<CursorUpdateOperation::type>  operations;
  std::vector<Row>  changedRows;
  std::vector<std::vector<int32_t> >  changedColumnsList;
  std::vector<int32_t>  changedRowIndexes;
  std::string token;

  _SnappyDataService_executeCursorUpdate_args__isset __isset;

  void __set_cursorId(const int64_t val);

  void __set_operations(const std::vector<CursorUpdateOperation::type> & val);

  void __set_changedRows(const std::vector<Row> & val);

  void __set_changedColumnsList(const std::vector<std::vector<int32_t> > & val);

  void __set_changedRowIndexes(const std::vector<int32_t> & val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_executeCursorUpdate_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(operations == rhs.operations))
      return false;
    if (!(changedRows == rhs.changedRows))
      return false;
    if (!(changedColumnsList == rhs.changedColumnsList))
      return false;
    if (!(changedRowIndexes == rhs.changedRowIndexes))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executeCursorUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executeCursorUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_executeCursorUpdate_pargs {
 public:


  virtual ~SnappyDataService_executeCursorUpdate_pargs() noexcept;
  const int64_t* cursorId;
  const std::vector<CursorUpdateOperation::type> * operations;
  const std::vector<Row> * changedRows;
  const std::vector<std::vector<int32_t> > * changedColumnsList;
  const std::vector<int32_t> * changedRowIndexes;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executeCursorUpdate_result__isset {
  _SnappyDataService_executeCursorUpdate_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_executeCursorUpdate_result__isset;

class SnappyDataService_executeCursorUpdate_result {
 public:

  SnappyDataService_executeCursorUpdate_result(const SnappyDataService_executeCursorUpdate_result&);
  SnappyDataService_executeCursorUpdate_result(SnappyDataService_executeCursorUpdate_result&&) noexcept;
  SnappyDataService_executeCursorUpdate_result& operator=(const SnappyDataService_executeCursorUpdate_result&);
  SnappyDataService_executeCursorUpdate_result& operator=(SnappyDataService_executeCursorUpdate_result&&) noexcept;
  SnappyDataService_executeCursorUpdate_result() {
  }

  virtual ~SnappyDataService_executeCursorUpdate_result() noexcept;
  SnappyException error;

  _SnappyDataService_executeCursorUpdate_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_executeCursorUpdate_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_executeCursorUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_executeCursorUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_executeCursorUpdate_presult__isset {
  _SnappyDataService_executeCursorUpdate_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_executeCursorUpdate_presult__isset;

class SnappyDataService_executeCursorUpdate_presult {
 public:


  virtual ~SnappyDataService_executeCursorUpdate_presult() noexcept;
  SnappyException error;

  _SnappyDataService_executeCursorUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_startXATransaction_args__isset {
  _SnappyDataService_startXATransaction_args__isset() : connId(false), xid(false), timeoutInSeconds(false), flags(false), token(false) {}
  bool connId :1;
  bool xid :1;
  bool timeoutInSeconds :1;
  bool flags :1;
  bool token :1;
} _SnappyDataService_startXATransaction_args__isset;

class SnappyDataService_startXATransaction_args {
 public:

  SnappyDataService_startXATransaction_args(const SnappyDataService_startXATransaction_args&);
  SnappyDataService_startXATransaction_args(SnappyDataService_startXATransaction_args&&) noexcept;
  SnappyDataService_startXATransaction_args& operator=(const SnappyDataService_startXATransaction_args&);
  SnappyDataService_startXATransaction_args& operator=(SnappyDataService_startXATransaction_args&&) noexcept;
  SnappyDataService_startXATransaction_args() : connId(0), timeoutInSeconds(0), flags(0), token() {
  }

  virtual ~SnappyDataService_startXATransaction_args() noexcept;
  int64_t connId;
  TransactionXid xid;
  int32_t timeoutInSeconds;
  int32_t flags;
  std::string token;

  _SnappyDataService_startXATransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_xid(const TransactionXid& val);

  void __set_timeoutInSeconds(const int32_t val);

  void __set_flags(const int32_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_startXATransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(timeoutInSeconds == rhs.timeoutInSeconds))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_startXATransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_startXATransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_startXATransaction_pargs {
 public:


  virtual ~SnappyDataService_startXATransaction_pargs() noexcept;
  const int64_t* connId;
  const TransactionXid* xid;
  const int32_t* timeoutInSeconds;
  const int32_t* flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_startXATransaction_result__isset {
  _SnappyDataService_startXATransaction_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_startXATransaction_result__isset;

class SnappyDataService_startXATransaction_result {
 public:

  SnappyDataService_startXATransaction_result(const SnappyDataService_startXATransaction_result&);
  SnappyDataService_startXATransaction_result(SnappyDataService_startXATransaction_result&&) noexcept;
  SnappyDataService_startXATransaction_result& operator=(const SnappyDataService_startXATransaction_result&);
  SnappyDataService_startXATransaction_result& operator=(SnappyDataService_startXATransaction_result&&) noexcept;
  SnappyDataService_startXATransaction_result() {
  }

  virtual ~SnappyDataService_startXATransaction_result() noexcept;
  SnappyException error;

  _SnappyDataService_startXATransaction_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_startXATransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_startXATransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_startXATransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_startXATransaction_presult__isset {
  _SnappyDataService_startXATransaction_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_startXATransaction_presult__isset;

class SnappyDataService_startXATransaction_presult {
 public:


  virtual ~SnappyDataService_startXATransaction_presult() noexcept;
  SnappyException error;

  _SnappyDataService_startXATransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_prepareXATransaction_args__isset {
  _SnappyDataService_prepareXATransaction_args__isset() : connId(false), xid(false), token(false) {}
  bool connId :1;
  bool xid :1;
  bool token :1;
} _SnappyDataService_prepareXATransaction_args__isset;

class SnappyDataService_prepareXATransaction_args {
 public:

  SnappyDataService_prepareXATransaction_args(const SnappyDataService_prepareXATransaction_args&);
  SnappyDataService_prepareXATransaction_args(SnappyDataService_prepareXATransaction_args&&) noexcept;
  SnappyDataService_prepareXATransaction_args& operator=(const SnappyDataService_prepareXATransaction_args&);
  SnappyDataService_prepareXATransaction_args& operator=(SnappyDataService_prepareXATransaction_args&&) noexcept;
  SnappyDataService_prepareXATransaction_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_prepareXATransaction_args() noexcept;
  int64_t connId;
  TransactionXid xid;
  std::string token;

  _SnappyDataService_prepareXATransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_xid(const TransactionXid& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_prepareXATransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_prepareXATransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_prepareXATransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_prepareXATransaction_pargs {
 public:


  virtual ~SnappyDataService_prepareXATransaction_pargs() noexcept;
  const int64_t* connId;
  const TransactionXid* xid;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_prepareXATransaction_result__isset {
  _SnappyDataService_prepareXATransaction_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_prepareXATransaction_result__isset;

class SnappyDataService_prepareXATransaction_result {
 public:

  SnappyDataService_prepareXATransaction_result(const SnappyDataService_prepareXATransaction_result&);
  SnappyDataService_prepareXATransaction_result(SnappyDataService_prepareXATransaction_result&&) noexcept;
  SnappyDataService_prepareXATransaction_result& operator=(const SnappyDataService_prepareXATransaction_result&);
  SnappyDataService_prepareXATransaction_result& operator=(SnappyDataService_prepareXATransaction_result&&) noexcept;
  SnappyDataService_prepareXATransaction_result() : success(0) {
  }

  virtual ~SnappyDataService_prepareXATransaction_result() noexcept;
  int32_t success;
  SnappyException error;

  _SnappyDataService_prepareXATransaction_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_prepareXATransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_prepareXATransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_prepareXATransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_prepareXATransaction_presult__isset {
  _SnappyDataService_prepareXATransaction_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_prepareXATransaction_presult__isset;

class SnappyDataService_prepareXATransaction_presult {
 public:


  virtual ~SnappyDataService_prepareXATransaction_presult() noexcept;
  int32_t* success;
  SnappyException error;

  _SnappyDataService_prepareXATransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_commitXATransaction_args__isset {
  _SnappyDataService_commitXATransaction_args__isset() : connId(false), xid(false), onePhase(false), token(false) {}
  bool connId :1;
  bool xid :1;
  bool onePhase :1;
  bool token :1;
} _SnappyDataService_commitXATransaction_args__isset;

class SnappyDataService_commitXATransaction_args {
 public:

  SnappyDataService_commitXATransaction_args(const SnappyDataService_commitXATransaction_args&);
  SnappyDataService_commitXATransaction_args(SnappyDataService_commitXATransaction_args&&) noexcept;
  SnappyDataService_commitXATransaction_args& operator=(const SnappyDataService_commitXATransaction_args&);
  SnappyDataService_commitXATransaction_args& operator=(SnappyDataService_commitXATransaction_args&&) noexcept;
  SnappyDataService_commitXATransaction_args() : connId(0), onePhase(0), token() {
  }

  virtual ~SnappyDataService_commitXATransaction_args() noexcept;
  int64_t connId;
  TransactionXid xid;
  bool onePhase;
  std::string token;

  _SnappyDataService_commitXATransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_xid(const TransactionXid& val);

  void __set_onePhase(const bool val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_commitXATransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(onePhase == rhs.onePhase))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_commitXATransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_commitXATransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_commitXATransaction_pargs {
 public:


  virtual ~SnappyDataService_commitXATransaction_pargs() noexcept;
  const int64_t* connId;
  const TransactionXid* xid;
  const bool* onePhase;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_commitXATransaction_result__isset {
  _SnappyDataService_commitXATransaction_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_commitXATransaction_result__isset;

class SnappyDataService_commitXATransaction_result {
 public:

  SnappyDataService_commitXATransaction_result(const SnappyDataService_commitXATransaction_result&);
  SnappyDataService_commitXATransaction_result(SnappyDataService_commitXATransaction_result&&) noexcept;
  SnappyDataService_commitXATransaction_result& operator=(const SnappyDataService_commitXATransaction_result&);
  SnappyDataService_commitXATransaction_result& operator=(SnappyDataService_commitXATransaction_result&&) noexcept;
  SnappyDataService_commitXATransaction_result() {
  }

  virtual ~SnappyDataService_commitXATransaction_result() noexcept;
  SnappyException error;

  _SnappyDataService_commitXATransaction_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_commitXATransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_commitXATransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_commitXATransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_commitXATransaction_presult__isset {
  _SnappyDataService_commitXATransaction_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_commitXATransaction_presult__isset;

class SnappyDataService_commitXATransaction_presult {
 public:


  virtual ~SnappyDataService_commitXATransaction_presult() noexcept;
  SnappyException error;

  _SnappyDataService_commitXATransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_rollbackXATransaction_args__isset {
  _SnappyDataService_rollbackXATransaction_args__isset() : connId(false), xid(false), token(false) {}
  bool connId :1;
  bool xid :1;
  bool token :1;
} _SnappyDataService_rollbackXATransaction_args__isset;

class SnappyDataService_rollbackXATransaction_args {
 public:

  SnappyDataService_rollbackXATransaction_args(const SnappyDataService_rollbackXATransaction_args&);
  SnappyDataService_rollbackXATransaction_args(SnappyDataService_rollbackXATransaction_args&&) noexcept;
  SnappyDataService_rollbackXATransaction_args& operator=(const SnappyDataService_rollbackXATransaction_args&);
  SnappyDataService_rollbackXATransaction_args& operator=(SnappyDataService_rollbackXATransaction_args&&) noexcept;
  SnappyDataService_rollbackXATransaction_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_rollbackXATransaction_args() noexcept;
  int64_t connId;
  TransactionXid xid;
  std::string token;

  _SnappyDataService_rollbackXATransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_xid(const TransactionXid& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_rollbackXATransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_rollbackXATransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_rollbackXATransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_rollbackXATransaction_pargs {
 public:


  virtual ~SnappyDataService_rollbackXATransaction_pargs() noexcept;
  const int64_t* connId;
  const TransactionXid* xid;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_rollbackXATransaction_result__isset {
  _SnappyDataService_rollbackXATransaction_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_rollbackXATransaction_result__isset;

class SnappyDataService_rollbackXATransaction_result {
 public:

  SnappyDataService_rollbackXATransaction_result(const SnappyDataService_rollbackXATransaction_result&);
  SnappyDataService_rollbackXATransaction_result(SnappyDataService_rollbackXATransaction_result&&) noexcept;
  SnappyDataService_rollbackXATransaction_result& operator=(const SnappyDataService_rollbackXATransaction_result&);
  SnappyDataService_rollbackXATransaction_result& operator=(SnappyDataService_rollbackXATransaction_result&&) noexcept;
  SnappyDataService_rollbackXATransaction_result() {
  }

  virtual ~SnappyDataService_rollbackXATransaction_result() noexcept;
  SnappyException error;

  _SnappyDataService_rollbackXATransaction_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_rollbackXATransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_rollbackXATransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_rollbackXATransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_rollbackXATransaction_presult__isset {
  _SnappyDataService_rollbackXATransaction_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_rollbackXATransaction_presult__isset;

class SnappyDataService_rollbackXATransaction_presult {
 public:


  virtual ~SnappyDataService_rollbackXATransaction_presult() noexcept;
  SnappyException error;

  _SnappyDataService_rollbackXATransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_forgetXATransaction_args__isset {
  _SnappyDataService_forgetXATransaction_args__isset() : connId(false), xid(false), token(false) {}
  bool connId :1;
  bool xid :1;
  bool token :1;
} _SnappyDataService_forgetXATransaction_args__isset;

class SnappyDataService_forgetXATransaction_args {
 public:

  SnappyDataService_forgetXATransaction_args(const SnappyDataService_forgetXATransaction_args&);
  SnappyDataService_forgetXATransaction_args(SnappyDataService_forgetXATransaction_args&&) noexcept;
  SnappyDataService_forgetXATransaction_args& operator=(const SnappyDataService_forgetXATransaction_args&);
  SnappyDataService_forgetXATransaction_args& operator=(SnappyDataService_forgetXATransaction_args&&) noexcept;
  SnappyDataService_forgetXATransaction_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_forgetXATransaction_args() noexcept;
  int64_t connId;
  TransactionXid xid;
  std::string token;

  _SnappyDataService_forgetXATransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_xid(const TransactionXid& val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_forgetXATransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_forgetXATransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_forgetXATransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_forgetXATransaction_pargs {
 public:


  virtual ~SnappyDataService_forgetXATransaction_pargs() noexcept;
  const int64_t* connId;
  const TransactionXid* xid;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_forgetXATransaction_result__isset {
  _SnappyDataService_forgetXATransaction_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_forgetXATransaction_result__isset;

class SnappyDataService_forgetXATransaction_result {
 public:

  SnappyDataService_forgetXATransaction_result(const SnappyDataService_forgetXATransaction_result&);
  SnappyDataService_forgetXATransaction_result(SnappyDataService_forgetXATransaction_result&&) noexcept;
  SnappyDataService_forgetXATransaction_result& operator=(const SnappyDataService_forgetXATransaction_result&);
  SnappyDataService_forgetXATransaction_result& operator=(SnappyDataService_forgetXATransaction_result&&) noexcept;
  SnappyDataService_forgetXATransaction_result() {
  }

  virtual ~SnappyDataService_forgetXATransaction_result() noexcept;
  SnappyException error;

  _SnappyDataService_forgetXATransaction_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_forgetXATransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_forgetXATransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_forgetXATransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_forgetXATransaction_presult__isset {
  _SnappyDataService_forgetXATransaction_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_forgetXATransaction_presult__isset;

class SnappyDataService_forgetXATransaction_presult {
 public:


  virtual ~SnappyDataService_forgetXATransaction_presult() noexcept;
  SnappyException error;

  _SnappyDataService_forgetXATransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_endXATransaction_args__isset {
  _SnappyDataService_endXATransaction_args__isset() : connId(false), xid(false), flags(false), token(false) {}
  bool connId :1;
  bool xid :1;
  bool flags :1;
  bool token :1;
} _SnappyDataService_endXATransaction_args__isset;

class SnappyDataService_endXATransaction_args {
 public:

  SnappyDataService_endXATransaction_args(const SnappyDataService_endXATransaction_args&);
  SnappyDataService_endXATransaction_args(SnappyDataService_endXATransaction_args&&) noexcept;
  SnappyDataService_endXATransaction_args& operator=(const SnappyDataService_endXATransaction_args&);
  SnappyDataService_endXATransaction_args& operator=(SnappyDataService_endXATransaction_args&&) noexcept;
  SnappyDataService_endXATransaction_args() : connId(0), flags(0), token() {
  }

  virtual ~SnappyDataService_endXATransaction_args() noexcept;
  int64_t connId;
  TransactionXid xid;
  int32_t flags;
  std::string token;

  _SnappyDataService_endXATransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_xid(const TransactionXid& val);

  void __set_flags(const int32_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_endXATransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(xid == rhs.xid))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_endXATransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_endXATransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_endXATransaction_pargs {
 public:


  virtual ~SnappyDataService_endXATransaction_pargs() noexcept;
  const int64_t* connId;
  const TransactionXid* xid;
  const int32_t* flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_endXATransaction_result__isset {
  _SnappyDataService_endXATransaction_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_endXATransaction_result__isset;

class SnappyDataService_endXATransaction_result {
 public:

  SnappyDataService_endXATransaction_result(const SnappyDataService_endXATransaction_result&);
  SnappyDataService_endXATransaction_result(SnappyDataService_endXATransaction_result&&) noexcept;
  SnappyDataService_endXATransaction_result& operator=(const SnappyDataService_endXATransaction_result&);
  SnappyDataService_endXATransaction_result& operator=(SnappyDataService_endXATransaction_result&&) noexcept;
  SnappyDataService_endXATransaction_result() {
  }

  virtual ~SnappyDataService_endXATransaction_result() noexcept;
  SnappyException error;

  _SnappyDataService_endXATransaction_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_endXATransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_endXATransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_endXATransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_endXATransaction_presult__isset {
  _SnappyDataService_endXATransaction_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_endXATransaction_presult__isset;

class SnappyDataService_endXATransaction_presult {
 public:


  virtual ~SnappyDataService_endXATransaction_presult() noexcept;
  SnappyException error;

  _SnappyDataService_endXATransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_recoverXATransaction_args__isset {
  _SnappyDataService_recoverXATransaction_args__isset() : connId(false), flag(false), token(false) {}
  bool connId :1;
  bool flag :1;
  bool token :1;
} _SnappyDataService_recoverXATransaction_args__isset;

class SnappyDataService_recoverXATransaction_args {
 public:

  SnappyDataService_recoverXATransaction_args(const SnappyDataService_recoverXATransaction_args&);
  SnappyDataService_recoverXATransaction_args(SnappyDataService_recoverXATransaction_args&&) noexcept;
  SnappyDataService_recoverXATransaction_args& operator=(const SnappyDataService_recoverXATransaction_args&);
  SnappyDataService_recoverXATransaction_args& operator=(SnappyDataService_recoverXATransaction_args&&) noexcept;
  SnappyDataService_recoverXATransaction_args() : connId(0), flag(0), token() {
  }

  virtual ~SnappyDataService_recoverXATransaction_args() noexcept;
  int64_t connId;
  int32_t flag;
  std::string token;

  _SnappyDataService_recoverXATransaction_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_flag(const int32_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_recoverXATransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(flag == rhs.flag))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_recoverXATransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_recoverXATransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_recoverXATransaction_pargs {
 public:


  virtual ~SnappyDataService_recoverXATransaction_pargs() noexcept;
  const int64_t* connId;
  const int32_t* flag;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_recoverXATransaction_result__isset {
  _SnappyDataService_recoverXATransaction_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_recoverXATransaction_result__isset;

class SnappyDataService_recoverXATransaction_result {
 public:

  SnappyDataService_recoverXATransaction_result(const SnappyDataService_recoverXATransaction_result&);
  SnappyDataService_recoverXATransaction_result(SnappyDataService_recoverXATransaction_result&&) noexcept;
  SnappyDataService_recoverXATransaction_result& operator=(const SnappyDataService_recoverXATransaction_result&);
  SnappyDataService_recoverXATransaction_result& operator=(SnappyDataService_recoverXATransaction_result&&) noexcept;
  SnappyDataService_recoverXATransaction_result() {
  }

  virtual ~SnappyDataService_recoverXATransaction_result() noexcept;
  std::vector<TransactionXid>  success;
  SnappyException error;

  _SnappyDataService_recoverXATransaction_result__isset __isset;

  void __set_success(const std::vector<TransactionXid> & val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_recoverXATransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_recoverXATransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_recoverXATransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_recoverXATransaction_presult__isset {
  _SnappyDataService_recoverXATransaction_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_recoverXATransaction_presult__isset;

class SnappyDataService_recoverXATransaction_presult {
 public:


  virtual ~SnappyDataService_recoverXATransaction_presult() noexcept;
  std::vector<TransactionXid> * success;
  SnappyException error;

  _SnappyDataService_recoverXATransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getServiceMetaData_args__isset {
  _SnappyDataService_getServiceMetaData_args__isset() : connId(false), token(false) {}
  bool connId :1;
  bool token :1;
} _SnappyDataService_getServiceMetaData_args__isset;

class SnappyDataService_getServiceMetaData_args {
 public:

  SnappyDataService_getServiceMetaData_args(const SnappyDataService_getServiceMetaData_args&);
  SnappyDataService_getServiceMetaData_args(SnappyDataService_getServiceMetaData_args&&) noexcept;
  SnappyDataService_getServiceMetaData_args& operator=(const SnappyDataService_getServiceMetaData_args&);
  SnappyDataService_getServiceMetaData_args& operator=(SnappyDataService_getServiceMetaData_args&&) noexcept;
  SnappyDataService_getServiceMetaData_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_getServiceMetaData_args() noexcept;
  int64_t connId;
  std::string token;

  _SnappyDataService_getServiceMetaData_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_getServiceMetaData_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getServiceMetaData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getServiceMetaData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getServiceMetaData_pargs {
 public:


  virtual ~SnappyDataService_getServiceMetaData_pargs() noexcept;
  const int64_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getServiceMetaData_result__isset {
  _SnappyDataService_getServiceMetaData_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getServiceMetaData_result__isset;

class SnappyDataService_getServiceMetaData_result {
 public:

  SnappyDataService_getServiceMetaData_result(const SnappyDataService_getServiceMetaData_result&);
  SnappyDataService_getServiceMetaData_result(SnappyDataService_getServiceMetaData_result&&) noexcept;
  SnappyDataService_getServiceMetaData_result& operator=(const SnappyDataService_getServiceMetaData_result&);
  SnappyDataService_getServiceMetaData_result& operator=(SnappyDataService_getServiceMetaData_result&&) noexcept;
  SnappyDataService_getServiceMetaData_result() {
  }

  virtual ~SnappyDataService_getServiceMetaData_result() noexcept;
  ServiceMetaData success;
  SnappyException error;

  _SnappyDataService_getServiceMetaData_result__isset __isset;

  void __set_success(const ServiceMetaData& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getServiceMetaData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getServiceMetaData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getServiceMetaData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getServiceMetaData_presult__isset {
  _SnappyDataService_getServiceMetaData_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getServiceMetaData_presult__isset;

class SnappyDataService_getServiceMetaData_presult {
 public:


  virtual ~SnappyDataService_getServiceMetaData_presult() noexcept;
  ServiceMetaData* success;
  SnappyException error;

  _SnappyDataService_getServiceMetaData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getSchemaMetaData_args__isset {
  _SnappyDataService_getSchemaMetaData_args__isset() : schemaCall(false), metadataArgs(false) {}
  bool schemaCall :1;
  bool metadataArgs :1;
} _SnappyDataService_getSchemaMetaData_args__isset;

class SnappyDataService_getSchemaMetaData_args {
 public:

  SnappyDataService_getSchemaMetaData_args(const SnappyDataService_getSchemaMetaData_args&);
  SnappyDataService_getSchemaMetaData_args(SnappyDataService_getSchemaMetaData_args&&) noexcept;
  SnappyDataService_getSchemaMetaData_args& operator=(const SnappyDataService_getSchemaMetaData_args&);
  SnappyDataService_getSchemaMetaData_args& operator=(SnappyDataService_getSchemaMetaData_args&&) noexcept;
  SnappyDataService_getSchemaMetaData_args() : schemaCall((ServiceMetaDataCall::type)0) {
  }

  virtual ~SnappyDataService_getSchemaMetaData_args() noexcept;
  ServiceMetaDataCall::type schemaCall;
  ServiceMetaDataArgs metadataArgs;

  _SnappyDataService_getSchemaMetaData_args__isset __isset;

  void __set_schemaCall(const ServiceMetaDataCall::type val);

  void __set_metadataArgs(const ServiceMetaDataArgs& val);

  bool operator == (const SnappyDataService_getSchemaMetaData_args & rhs) const
  {
    if (!(schemaCall == rhs.schemaCall))
      return false;
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getSchemaMetaData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getSchemaMetaData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getSchemaMetaData_pargs {
 public:


  virtual ~SnappyDataService_getSchemaMetaData_pargs() noexcept;
  const ServiceMetaDataCall::type* schemaCall;
  const ServiceMetaDataArgs* metadataArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getSchemaMetaData_result__isset {
  _SnappyDataService_getSchemaMetaData_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getSchemaMetaData_result__isset;

class SnappyDataService_getSchemaMetaData_result {
 public:

  SnappyDataService_getSchemaMetaData_result(const SnappyDataService_getSchemaMetaData_result&);
  SnappyDataService_getSchemaMetaData_result(SnappyDataService_getSchemaMetaData_result&&) noexcept;
  SnappyDataService_getSchemaMetaData_result& operator=(const SnappyDataService_getSchemaMetaData_result&);
  SnappyDataService_getSchemaMetaData_result& operator=(SnappyDataService_getSchemaMetaData_result&&) noexcept;
  SnappyDataService_getSchemaMetaData_result() {
  }

  virtual ~SnappyDataService_getSchemaMetaData_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_getSchemaMetaData_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getSchemaMetaData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getSchemaMetaData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getSchemaMetaData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getSchemaMetaData_presult__isset {
  _SnappyDataService_getSchemaMetaData_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getSchemaMetaData_presult__isset;

class SnappyDataService_getSchemaMetaData_presult {
 public:


  virtual ~SnappyDataService_getSchemaMetaData_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_getSchemaMetaData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getIndexInfo_args__isset {
  _SnappyDataService_getIndexInfo_args__isset() : metadataArgs(false), unique(false), approximate(false) {}
  bool metadataArgs :1;
  bool unique :1;
  bool approximate :1;
} _SnappyDataService_getIndexInfo_args__isset;

class SnappyDataService_getIndexInfo_args {
 public:

  SnappyDataService_getIndexInfo_args(const SnappyDataService_getIndexInfo_args&);
  SnappyDataService_getIndexInfo_args(SnappyDataService_getIndexInfo_args&&) noexcept;
  SnappyDataService_getIndexInfo_args& operator=(const SnappyDataService_getIndexInfo_args&);
  SnappyDataService_getIndexInfo_args& operator=(SnappyDataService_getIndexInfo_args&&) noexcept;
  SnappyDataService_getIndexInfo_args() : unique(0), approximate(0) {
  }

  virtual ~SnappyDataService_getIndexInfo_args() noexcept;
  ServiceMetaDataArgs metadataArgs;
  bool unique;
  bool approximate;

  _SnappyDataService_getIndexInfo_args__isset __isset;

  void __set_metadataArgs(const ServiceMetaDataArgs& val);

  void __set_unique(const bool val);

  void __set_approximate(const bool val);

  bool operator == (const SnappyDataService_getIndexInfo_args & rhs) const
  {
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    if (!(unique == rhs.unique))
      return false;
    if (!(approximate == rhs.approximate))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getIndexInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getIndexInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getIndexInfo_pargs {
 public:


  virtual ~SnappyDataService_getIndexInfo_pargs() noexcept;
  const ServiceMetaDataArgs* metadataArgs;
  const bool* unique;
  const bool* approximate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getIndexInfo_result__isset {
  _SnappyDataService_getIndexInfo_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getIndexInfo_result__isset;

class SnappyDataService_getIndexInfo_result {
 public:

  SnappyDataService_getIndexInfo_result(const SnappyDataService_getIndexInfo_result&);
  SnappyDataService_getIndexInfo_result(SnappyDataService_getIndexInfo_result&&) noexcept;
  SnappyDataService_getIndexInfo_result& operator=(const SnappyDataService_getIndexInfo_result&);
  SnappyDataService_getIndexInfo_result& operator=(SnappyDataService_getIndexInfo_result&&) noexcept;
  SnappyDataService_getIndexInfo_result() {
  }

  virtual ~SnappyDataService_getIndexInfo_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_getIndexInfo_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getIndexInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getIndexInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getIndexInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getIndexInfo_presult__isset {
  _SnappyDataService_getIndexInfo_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getIndexInfo_presult__isset;

class SnappyDataService_getIndexInfo_presult {
 public:


  virtual ~SnappyDataService_getIndexInfo_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_getIndexInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getUDTs_args__isset {
  _SnappyDataService_getUDTs_args__isset() : metadataArgs(false), types(false) {}
  bool metadataArgs :1;
  bool types :1;
} _SnappyDataService_getUDTs_args__isset;

class SnappyDataService_getUDTs_args {
 public:

  SnappyDataService_getUDTs_args(const SnappyDataService_getUDTs_args&);
  SnappyDataService_getUDTs_args(SnappyDataService_getUDTs_args&&) noexcept;
  SnappyDataService_getUDTs_args& operator=(const SnappyDataService_getUDTs_args&);
  SnappyDataService_getUDTs_args& operator=(SnappyDataService_getUDTs_args&&) noexcept;
  SnappyDataService_getUDTs_args() {
  }

  virtual ~SnappyDataService_getUDTs_args() noexcept;
  ServiceMetaDataArgs metadataArgs;
  std::vector<SnappyType::type>  types;

  _SnappyDataService_getUDTs_args__isset __isset;

  void __set_metadataArgs(const ServiceMetaDataArgs& val);

  void __set_types(const std::vector<SnappyType::type> & val);

  bool operator == (const SnappyDataService_getUDTs_args & rhs) const
  {
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    if (!(types == rhs.types))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getUDTs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getUDTs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getUDTs_pargs {
 public:


  virtual ~SnappyDataService_getUDTs_pargs() noexcept;
  const ServiceMetaDataArgs* metadataArgs;
  const std::vector<SnappyType::type> * types;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getUDTs_result__isset {
  _SnappyDataService_getUDTs_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getUDTs_result__isset;

class SnappyDataService_getUDTs_result {
 public:

  SnappyDataService_getUDTs_result(const SnappyDataService_getUDTs_result&);
  SnappyDataService_getUDTs_result(SnappyDataService_getUDTs_result&&) noexcept;
  SnappyDataService_getUDTs_result& operator=(const SnappyDataService_getUDTs_result&);
  SnappyDataService_getUDTs_result& operator=(SnappyDataService_getUDTs_result&&) noexcept;
  SnappyDataService_getUDTs_result() {
  }

  virtual ~SnappyDataService_getUDTs_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_getUDTs_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getUDTs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getUDTs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getUDTs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getUDTs_presult__isset {
  _SnappyDataService_getUDTs_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getUDTs_presult__isset;

class SnappyDataService_getUDTs_presult {
 public:


  virtual ~SnappyDataService_getUDTs_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_getUDTs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_getBestRowIdentifier_args__isset {
  _SnappyDataService_getBestRowIdentifier_args__isset() : metadataArgs(false), scope(false), nullable(false) {}
  bool metadataArgs :1;
  bool scope :1;
  bool nullable :1;
} _SnappyDataService_getBestRowIdentifier_args__isset;

class SnappyDataService_getBestRowIdentifier_args {
 public:

  SnappyDataService_getBestRowIdentifier_args(const SnappyDataService_getBestRowIdentifier_args&);
  SnappyDataService_getBestRowIdentifier_args(SnappyDataService_getBestRowIdentifier_args&&) noexcept;
  SnappyDataService_getBestRowIdentifier_args& operator=(const SnappyDataService_getBestRowIdentifier_args&);
  SnappyDataService_getBestRowIdentifier_args& operator=(SnappyDataService_getBestRowIdentifier_args&&) noexcept;
  SnappyDataService_getBestRowIdentifier_args() : scope(0), nullable(0) {
  }

  virtual ~SnappyDataService_getBestRowIdentifier_args() noexcept;
  ServiceMetaDataArgs metadataArgs;
  int32_t scope;
  bool nullable;

  _SnappyDataService_getBestRowIdentifier_args__isset __isset;

  void __set_metadataArgs(const ServiceMetaDataArgs& val);

  void __set_scope(const int32_t val);

  void __set_nullable(const bool val);

  bool operator == (const SnappyDataService_getBestRowIdentifier_args & rhs) const
  {
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(nullable == rhs.nullable))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getBestRowIdentifier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getBestRowIdentifier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_getBestRowIdentifier_pargs {
 public:


  virtual ~SnappyDataService_getBestRowIdentifier_pargs() noexcept;
  const ServiceMetaDataArgs* metadataArgs;
  const int32_t* scope;
  const bool* nullable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getBestRowIdentifier_result__isset {
  _SnappyDataService_getBestRowIdentifier_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getBestRowIdentifier_result__isset;

class SnappyDataService_getBestRowIdentifier_result {
 public:

  SnappyDataService_getBestRowIdentifier_result(const SnappyDataService_getBestRowIdentifier_result&);
  SnappyDataService_getBestRowIdentifier_result(SnappyDataService_getBestRowIdentifier_result&&) noexcept;
  SnappyDataService_getBestRowIdentifier_result& operator=(const SnappyDataService_getBestRowIdentifier_result&);
  SnappyDataService_getBestRowIdentifier_result& operator=(SnappyDataService_getBestRowIdentifier_result&&) noexcept;
  SnappyDataService_getBestRowIdentifier_result() {
  }

  virtual ~SnappyDataService_getBestRowIdentifier_result() noexcept;
  RowSet success;
  SnappyException error;

  _SnappyDataService_getBestRowIdentifier_result__isset __isset;

  void __set_success(const RowSet& val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_getBestRowIdentifier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_getBestRowIdentifier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_getBestRowIdentifier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_getBestRowIdentifier_presult__isset {
  _SnappyDataService_getBestRowIdentifier_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_getBestRowIdentifier_presult__isset;

class SnappyDataService_getBestRowIdentifier_presult {
 public:


  virtual ~SnappyDataService_getBestRowIdentifier_presult() noexcept;
  RowSet* success;
  SnappyException error;

  _SnappyDataService_getBestRowIdentifier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_fetchActiveConnections_args__isset {
  _SnappyDataService_fetchActiveConnections_args__isset() : connId(false), token(false) {}
  bool connId :1;
  bool token :1;
} _SnappyDataService_fetchActiveConnections_args__isset;

class SnappyDataService_fetchActiveConnections_args {
 public:

  SnappyDataService_fetchActiveConnections_args(const SnappyDataService_fetchActiveConnections_args&);
  SnappyDataService_fetchActiveConnections_args(SnappyDataService_fetchActiveConnections_args&&) noexcept;
  SnappyDataService_fetchActiveConnections_args& operator=(const SnappyDataService_fetchActiveConnections_args&);
  SnappyDataService_fetchActiveConnections_args& operator=(SnappyDataService_fetchActiveConnections_args&&) noexcept;
  SnappyDataService_fetchActiveConnections_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_fetchActiveConnections_args() noexcept;
  int64_t connId;
  std::string token;

  _SnappyDataService_fetchActiveConnections_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_fetchActiveConnections_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_fetchActiveConnections_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_fetchActiveConnections_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_fetchActiveConnections_pargs {
 public:


  virtual ~SnappyDataService_fetchActiveConnections_pargs() noexcept;
  const int64_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_fetchActiveConnections_result__isset {
  _SnappyDataService_fetchActiveConnections_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_fetchActiveConnections_result__isset;

class SnappyDataService_fetchActiveConnections_result {
 public:

  SnappyDataService_fetchActiveConnections_result(const SnappyDataService_fetchActiveConnections_result&);
  SnappyDataService_fetchActiveConnections_result(SnappyDataService_fetchActiveConnections_result&&) noexcept;
  SnappyDataService_fetchActiveConnections_result& operator=(const SnappyDataService_fetchActiveConnections_result&);
  SnappyDataService_fetchActiveConnections_result& operator=(SnappyDataService_fetchActiveConnections_result&&) noexcept;
  SnappyDataService_fetchActiveConnections_result() {
  }

  virtual ~SnappyDataService_fetchActiveConnections_result() noexcept;
  std::vector<ConnectionProperties>  success;
  SnappyException error;

  _SnappyDataService_fetchActiveConnections_result__isset __isset;

  void __set_success(const std::vector<ConnectionProperties> & val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_fetchActiveConnections_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_fetchActiveConnections_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_fetchActiveConnections_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_fetchActiveConnections_presult__isset {
  _SnappyDataService_fetchActiveConnections_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_fetchActiveConnections_presult__isset;

class SnappyDataService_fetchActiveConnections_presult {
 public:


  virtual ~SnappyDataService_fetchActiveConnections_presult() noexcept;
  std::vector<ConnectionProperties> * success;
  SnappyException error;

  _SnappyDataService_fetchActiveConnections_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_fetchActiveStatements_args__isset {
  _SnappyDataService_fetchActiveStatements_args__isset() : connId(false), token(false) {}
  bool connId :1;
  bool token :1;
} _SnappyDataService_fetchActiveStatements_args__isset;

class SnappyDataService_fetchActiveStatements_args {
 public:

  SnappyDataService_fetchActiveStatements_args(const SnappyDataService_fetchActiveStatements_args&);
  SnappyDataService_fetchActiveStatements_args(SnappyDataService_fetchActiveStatements_args&&) noexcept;
  SnappyDataService_fetchActiveStatements_args& operator=(const SnappyDataService_fetchActiveStatements_args&);
  SnappyDataService_fetchActiveStatements_args& operator=(SnappyDataService_fetchActiveStatements_args&&) noexcept;
  SnappyDataService_fetchActiveStatements_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_fetchActiveStatements_args() noexcept;
  int64_t connId;
  std::string token;

  _SnappyDataService_fetchActiveStatements_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_fetchActiveStatements_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_fetchActiveStatements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_fetchActiveStatements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_fetchActiveStatements_pargs {
 public:


  virtual ~SnappyDataService_fetchActiveStatements_pargs() noexcept;
  const int64_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_fetchActiveStatements_result__isset {
  _SnappyDataService_fetchActiveStatements_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_fetchActiveStatements_result__isset;

class SnappyDataService_fetchActiveStatements_result {
 public:

  SnappyDataService_fetchActiveStatements_result(const SnappyDataService_fetchActiveStatements_result&);
  SnappyDataService_fetchActiveStatements_result(SnappyDataService_fetchActiveStatements_result&&) noexcept;
  SnappyDataService_fetchActiveStatements_result& operator=(const SnappyDataService_fetchActiveStatements_result&);
  SnappyDataService_fetchActiveStatements_result& operator=(SnappyDataService_fetchActiveStatements_result&&) noexcept;
  SnappyDataService_fetchActiveStatements_result() {
  }

  virtual ~SnappyDataService_fetchActiveStatements_result() noexcept;
  std::map<int64_t, std::string>  success;
  SnappyException error;

  _SnappyDataService_fetchActiveStatements_result__isset __isset;

  void __set_success(const std::map<int64_t, std::string> & val);

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_fetchActiveStatements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_fetchActiveStatements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_fetchActiveStatements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_fetchActiveStatements_presult__isset {
  _SnappyDataService_fetchActiveStatements_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SnappyDataService_fetchActiveStatements_presult__isset;

class SnappyDataService_fetchActiveStatements_presult {
 public:


  virtual ~SnappyDataService_fetchActiveStatements_presult() noexcept;
  std::map<int64_t, std::string> * success;
  SnappyException error;

  _SnappyDataService_fetchActiveStatements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_cancelStatement_args__isset {
  _SnappyDataService_cancelStatement_args__isset() : stmtId(false), token(false) {}
  bool stmtId :1;
  bool token :1;
} _SnappyDataService_cancelStatement_args__isset;

class SnappyDataService_cancelStatement_args {
 public:

  SnappyDataService_cancelStatement_args(const SnappyDataService_cancelStatement_args&);
  SnappyDataService_cancelStatement_args(SnappyDataService_cancelStatement_args&&) noexcept;
  SnappyDataService_cancelStatement_args& operator=(const SnappyDataService_cancelStatement_args&);
  SnappyDataService_cancelStatement_args& operator=(SnappyDataService_cancelStatement_args&&) noexcept;
  SnappyDataService_cancelStatement_args() : stmtId(0), token() {
  }

  virtual ~SnappyDataService_cancelStatement_args() noexcept;
  int64_t stmtId;
  std::string token;

  _SnappyDataService_cancelStatement_args__isset __isset;

  void __set_stmtId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_cancelStatement_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_cancelStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_cancelStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_cancelStatement_pargs {
 public:


  virtual ~SnappyDataService_cancelStatement_pargs() noexcept;
  const int64_t* stmtId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_cancelStatement_result__isset {
  _SnappyDataService_cancelStatement_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_cancelStatement_result__isset;

class SnappyDataService_cancelStatement_result {
 public:

  SnappyDataService_cancelStatement_result(const SnappyDataService_cancelStatement_result&);
  SnappyDataService_cancelStatement_result(SnappyDataService_cancelStatement_result&&) noexcept;
  SnappyDataService_cancelStatement_result& operator=(const SnappyDataService_cancelStatement_result&);
  SnappyDataService_cancelStatement_result& operator=(SnappyDataService_cancelStatement_result&&) noexcept;
  SnappyDataService_cancelStatement_result() {
  }

  virtual ~SnappyDataService_cancelStatement_result() noexcept;
  SnappyException error;

  _SnappyDataService_cancelStatement_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_cancelStatement_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_cancelStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_cancelStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_cancelStatement_presult__isset {
  _SnappyDataService_cancelStatement_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_cancelStatement_presult__isset;

class SnappyDataService_cancelStatement_presult {
 public:


  virtual ~SnappyDataService_cancelStatement_presult() noexcept;
  SnappyException error;

  _SnappyDataService_cancelStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_cancelCurrentStatement_args__isset {
  _SnappyDataService_cancelCurrentStatement_args__isset() : connId(false), token(false) {}
  bool connId :1;
  bool token :1;
} _SnappyDataService_cancelCurrentStatement_args__isset;

class SnappyDataService_cancelCurrentStatement_args {
 public:

  SnappyDataService_cancelCurrentStatement_args(const SnappyDataService_cancelCurrentStatement_args&);
  SnappyDataService_cancelCurrentStatement_args(SnappyDataService_cancelCurrentStatement_args&&) noexcept;
  SnappyDataService_cancelCurrentStatement_args& operator=(const SnappyDataService_cancelCurrentStatement_args&);
  SnappyDataService_cancelCurrentStatement_args& operator=(SnappyDataService_cancelCurrentStatement_args&&) noexcept;
  SnappyDataService_cancelCurrentStatement_args() : connId(0), token() {
  }

  virtual ~SnappyDataService_cancelCurrentStatement_args() noexcept;
  int64_t connId;
  std::string token;

  _SnappyDataService_cancelCurrentStatement_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_cancelCurrentStatement_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_cancelCurrentStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_cancelCurrentStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_cancelCurrentStatement_pargs {
 public:


  virtual ~SnappyDataService_cancelCurrentStatement_pargs() noexcept;
  const int64_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_cancelCurrentStatement_result__isset {
  _SnappyDataService_cancelCurrentStatement_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_cancelCurrentStatement_result__isset;

class SnappyDataService_cancelCurrentStatement_result {
 public:

  SnappyDataService_cancelCurrentStatement_result(const SnappyDataService_cancelCurrentStatement_result&);
  SnappyDataService_cancelCurrentStatement_result(SnappyDataService_cancelCurrentStatement_result&&) noexcept;
  SnappyDataService_cancelCurrentStatement_result& operator=(const SnappyDataService_cancelCurrentStatement_result&);
  SnappyDataService_cancelCurrentStatement_result& operator=(SnappyDataService_cancelCurrentStatement_result&&) noexcept;
  SnappyDataService_cancelCurrentStatement_result() {
  }

  virtual ~SnappyDataService_cancelCurrentStatement_result() noexcept;
  SnappyException error;

  _SnappyDataService_cancelCurrentStatement_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_cancelCurrentStatement_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_cancelCurrentStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_cancelCurrentStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_cancelCurrentStatement_presult__isset {
  _SnappyDataService_cancelCurrentStatement_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_cancelCurrentStatement_presult__isset;

class SnappyDataService_cancelCurrentStatement_presult {
 public:


  virtual ~SnappyDataService_cancelCurrentStatement_presult() noexcept;
  SnappyException error;

  _SnappyDataService_cancelCurrentStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_closeResultSet_args__isset {
  _SnappyDataService_closeResultSet_args__isset() : cursorId(false), token(false) {}
  bool cursorId :1;
  bool token :1;
} _SnappyDataService_closeResultSet_args__isset;

class SnappyDataService_closeResultSet_args {
 public:

  SnappyDataService_closeResultSet_args(const SnappyDataService_closeResultSet_args&);
  SnappyDataService_closeResultSet_args(SnappyDataService_closeResultSet_args&&) noexcept;
  SnappyDataService_closeResultSet_args& operator=(const SnappyDataService_closeResultSet_args&);
  SnappyDataService_closeResultSet_args& operator=(SnappyDataService_closeResultSet_args&&) noexcept;
  SnappyDataService_closeResultSet_args() : cursorId(0), token() {
  }

  virtual ~SnappyDataService_closeResultSet_args() noexcept;
  int64_t cursorId;
  std::string token;

  _SnappyDataService_closeResultSet_args__isset __isset;

  void __set_cursorId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_closeResultSet_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_closeResultSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_closeResultSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_closeResultSet_pargs {
 public:


  virtual ~SnappyDataService_closeResultSet_pargs() noexcept;
  const int64_t* cursorId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_closeResultSet_result__isset {
  _SnappyDataService_closeResultSet_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_closeResultSet_result__isset;

class SnappyDataService_closeResultSet_result {
 public:

  SnappyDataService_closeResultSet_result(const SnappyDataService_closeResultSet_result&);
  SnappyDataService_closeResultSet_result(SnappyDataService_closeResultSet_result&&) noexcept;
  SnappyDataService_closeResultSet_result& operator=(const SnappyDataService_closeResultSet_result&);
  SnappyDataService_closeResultSet_result& operator=(SnappyDataService_closeResultSet_result&&) noexcept;
  SnappyDataService_closeResultSet_result() {
  }

  virtual ~SnappyDataService_closeResultSet_result() noexcept;
  SnappyException error;

  _SnappyDataService_closeResultSet_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_closeResultSet_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_closeResultSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_closeResultSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_closeResultSet_presult__isset {
  _SnappyDataService_closeResultSet_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_closeResultSet_presult__isset;

class SnappyDataService_closeResultSet_presult {
 public:


  virtual ~SnappyDataService_closeResultSet_presult() noexcept;
  SnappyException error;

  _SnappyDataService_closeResultSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_closeStatement_args__isset {
  _SnappyDataService_closeStatement_args__isset() : stmtId(false), token(false) {}
  bool stmtId :1;
  bool token :1;
} _SnappyDataService_closeStatement_args__isset;

class SnappyDataService_closeStatement_args {
 public:

  SnappyDataService_closeStatement_args(const SnappyDataService_closeStatement_args&);
  SnappyDataService_closeStatement_args(SnappyDataService_closeStatement_args&&) noexcept;
  SnappyDataService_closeStatement_args& operator=(const SnappyDataService_closeStatement_args&);
  SnappyDataService_closeStatement_args& operator=(SnappyDataService_closeStatement_args&&) noexcept;
  SnappyDataService_closeStatement_args() : stmtId(0), token() {
  }

  virtual ~SnappyDataService_closeStatement_args() noexcept;
  int64_t stmtId;
  std::string token;

  _SnappyDataService_closeStatement_args__isset __isset;

  void __set_stmtId(const int64_t val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_closeStatement_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_closeStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_closeStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_closeStatement_pargs {
 public:


  virtual ~SnappyDataService_closeStatement_pargs() noexcept;
  const int64_t* stmtId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_closeStatement_result__isset {
  _SnappyDataService_closeStatement_result__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_closeStatement_result__isset;

class SnappyDataService_closeStatement_result {
 public:

  SnappyDataService_closeStatement_result(const SnappyDataService_closeStatement_result&);
  SnappyDataService_closeStatement_result(SnappyDataService_closeStatement_result&&) noexcept;
  SnappyDataService_closeStatement_result& operator=(const SnappyDataService_closeStatement_result&);
  SnappyDataService_closeStatement_result& operator=(SnappyDataService_closeStatement_result&&) noexcept;
  SnappyDataService_closeStatement_result() {
  }

  virtual ~SnappyDataService_closeStatement_result() noexcept;
  SnappyException error;

  _SnappyDataService_closeStatement_result__isset __isset;

  void __set_error(const SnappyException& val);

  bool operator == (const SnappyDataService_closeStatement_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_closeStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_closeStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_closeStatement_presult__isset {
  _SnappyDataService_closeStatement_presult__isset() : error(false) {}
  bool error :1;
} _SnappyDataService_closeStatement_presult__isset;

class SnappyDataService_closeStatement_presult {
 public:


  virtual ~SnappyDataService_closeStatement_presult() noexcept;
  SnappyException error;

  _SnappyDataService_closeStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SnappyDataService_closeConnection_args__isset {
  _SnappyDataService_closeConnection_args__isset() : connId(false), closeSocket(false), token(false) {}
  bool connId :1;
  bool closeSocket :1;
  bool token :1;
} _SnappyDataService_closeConnection_args__isset;

class SnappyDataService_closeConnection_args {
 public:

  SnappyDataService_closeConnection_args(const SnappyDataService_closeConnection_args&);
  SnappyDataService_closeConnection_args(SnappyDataService_closeConnection_args&&) noexcept;
  SnappyDataService_closeConnection_args& operator=(const SnappyDataService_closeConnection_args&);
  SnappyDataService_closeConnection_args& operator=(SnappyDataService_closeConnection_args&&) noexcept;
  SnappyDataService_closeConnection_args() : connId(0), closeSocket(0), token() {
  }

  virtual ~SnappyDataService_closeConnection_args() noexcept;
  int64_t connId;
  bool closeSocket;
  std::string token;

  _SnappyDataService_closeConnection_args__isset __isset;

  void __set_connId(const int64_t val);

  void __set_closeSocket(const bool val);

  void __set_token(const std::string& val);

  bool operator == (const SnappyDataService_closeConnection_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(closeSocket == rhs.closeSocket))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_closeConnection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_closeConnection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_closeConnection_pargs {
 public:


  virtual ~SnappyDataService_closeConnection_pargs() noexcept;
  const int64_t* connId;
  const bool* closeSocket;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SnappyDataService_bulkClose_args__isset {
  _SnappyDataService_bulkClose_args__isset() : entities(false) {}
  bool entities :1;
} _SnappyDataService_bulkClose_args__isset;

class SnappyDataService_bulkClose_args {
 public:

  SnappyDataService_bulkClose_args(const SnappyDataService_bulkClose_args&);
  SnappyDataService_bulkClose_args(SnappyDataService_bulkClose_args&&) noexcept;
  SnappyDataService_bulkClose_args& operator=(const SnappyDataService_bulkClose_args&);
  SnappyDataService_bulkClose_args& operator=(SnappyDataService_bulkClose_args&&) noexcept;
  SnappyDataService_bulkClose_args() {
  }

  virtual ~SnappyDataService_bulkClose_args() noexcept;
  std::vector<EntityId>  entities;

  _SnappyDataService_bulkClose_args__isset __isset;

  void __set_entities(const std::vector<EntityId> & val);

  bool operator == (const SnappyDataService_bulkClose_args & rhs) const
  {
    if (!(entities == rhs.entities))
      return false;
    return true;
  }
  bool operator != (const SnappyDataService_bulkClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyDataService_bulkClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SnappyDataService_bulkClose_pargs {
 public:


  virtual ~SnappyDataService_bulkClose_pargs() noexcept;
  const std::vector<EntityId> * entities;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class SnappyDataServiceClient : virtual public SnappyDataServiceIf {
 public:
  SnappyDataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SnappyDataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getPreferredServer(HostAddress& _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void send_getPreferredServer(const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void recv_getPreferredServer(HostAddress& _return);
  void getAllServersWithPreferredServer(std::vector<HostAddress> & _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void send_getAllServersWithPreferredServer(const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void recv_getAllServersWithPreferredServer(std::vector<HostAddress> & _return);
  void openConnection(ConnectionProperties& _return, const OpenConnectionArgs& arguments);
  void send_openConnection(const OpenConnectionArgs& arguments);
  void recv_openConnection(ConnectionProperties& _return);
  void execute(StatementResult& _return, const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void send_execute(const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void recv_execute(StatementResult& _return);
  void executeUpdate(UpdateResult& _return, const int64_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token);
  void send_executeUpdate(const int64_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token);
  void recv_executeUpdate(UpdateResult& _return);
  void executeQuery(RowSet& _return, const int64_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token);
  void send_executeQuery(const int64_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token);
  void recv_executeQuery(RowSet& _return);
  void prepareStatement(PrepareResult& _return, const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void send_prepareStatement(const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void recv_prepareStatement(PrepareResult& _return);
  void executePrepared(StatementResult& _return, const int64_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void send_executePrepared(const int64_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void recv_executePrepared(StatementResult& _return);
  void executePreparedUpdate(UpdateResult& _return, const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token);
  void send_executePreparedUpdate(const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token);
  void recv_executePreparedUpdate(UpdateResult& _return);
  void executePreparedQuery(RowSet& _return, const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token);
  void send_executePreparedQuery(const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token);
  void recv_executePreparedQuery(RowSet& _return);
  void executePreparedBatch(UpdateResult& _return, const int64_t stmtId, const std::vector<Row> & paramsBatch, const StatementAttrs& attrs, const std::string& token);
  void send_executePreparedBatch(const int64_t stmtId, const std::vector<Row> & paramsBatch, const StatementAttrs& attrs, const std::string& token);
  void recv_executePreparedBatch(UpdateResult& _return);
  void prepareAndExecute(StatementResult& _return, const int64_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void send_prepareAndExecute(const int64_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void recv_prepareAndExecute(StatementResult& _return);
  int8_t beginTransaction(const int64_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_beginTransaction(const int64_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  int8_t recv_beginTransaction();
  void setTransactionAttributes(const int64_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_setTransactionAttributes(const int64_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void recv_setTransactionAttributes();
  void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return, const int64_t connId, const std::string& token);
  void send_getTransactionAttributes(const int64_t connId, const std::string& token);
  void recv_getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return);
  void commitTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_commitTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void recv_commitTransaction();
  void rollbackTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_rollbackTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void recv_rollbackTransaction();
  void getNextResultSet(RowSet& _return, const int64_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token);
  void send_getNextResultSet(const int64_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token);
  void recv_getNextResultSet(RowSet& _return);
  void getBlobChunk(BlobChunk& _return, const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void send_getBlobChunk(const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void recv_getBlobChunk(BlobChunk& _return);
  void getClobChunk(ClobChunk& _return, const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void send_getClobChunk(const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void recv_getClobChunk(ClobChunk& _return);
  int64_t sendBlobChunk(const BlobChunk& chunk, const int64_t connId, const std::string& token);
  void send_sendBlobChunk(const BlobChunk& chunk, const int64_t connId, const std::string& token);
  int64_t recv_sendBlobChunk();
  int64_t sendClobChunk(const ClobChunk& chunk, const int64_t connId, const std::string& token);
  void send_sendClobChunk(const ClobChunk& chunk, const int64_t connId, const std::string& token);
  int64_t recv_sendClobChunk();
  void freeLob(const int64_t connId, const int64_t lobId, const std::string& token);
  void send_freeLob(const int64_t connId, const int64_t lobId, const std::string& token);
  void recv_freeLob();
  void scrollCursor(RowSet& _return, const int64_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token);
  void send_scrollCursor(const int64_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token);
  void recv_scrollCursor(RowSet& _return);
  void executeCursorUpdate(const int64_t cursorId, const std::vector<CursorUpdateOperation::type> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token);
  void send_executeCursorUpdate(const int64_t cursorId, const std::vector<CursorUpdateOperation::type> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token);
  void recv_executeCursorUpdate();
  void startXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t timeoutInSeconds, const int32_t flags, const std::string& token);
  void send_startXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t timeoutInSeconds, const int32_t flags, const std::string& token);
  void recv_startXATransaction();
  int32_t prepareXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token);
  void send_prepareXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token);
  int32_t recv_prepareXATransaction();
  void commitXATransaction(const int64_t connId, const TransactionXid& xid, const bool onePhase, const std::string& token);
  void send_commitXATransaction(const int64_t connId, const TransactionXid& xid, const bool onePhase, const std::string& token);
  void recv_commitXATransaction();
  void rollbackXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token);
  void send_rollbackXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token);
  void recv_rollbackXATransaction();
  void forgetXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token);
  void send_forgetXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token);
  void recv_forgetXATransaction();
  void endXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t flags, const std::string& token);
  void send_endXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t flags, const std::string& token);
  void recv_endXATransaction();
  void recoverXATransaction(std::vector<TransactionXid> & _return, const int64_t connId, const int32_t flag, const std::string& token);
  void send_recoverXATransaction(const int64_t connId, const int32_t flag, const std::string& token);
  void recv_recoverXATransaction(std::vector<TransactionXid> & _return);
  void getServiceMetaData(ServiceMetaData& _return, const int64_t connId, const std::string& token);
  void send_getServiceMetaData(const int64_t connId, const std::string& token);
  void recv_getServiceMetaData(ServiceMetaData& _return);
  void getSchemaMetaData(RowSet& _return, const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs);
  void send_getSchemaMetaData(const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs);
  void recv_getSchemaMetaData(RowSet& _return);
  void getIndexInfo(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate);
  void send_getIndexInfo(const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate);
  void recv_getIndexInfo(RowSet& _return);
  void getUDTs(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const std::vector<SnappyType::type> & types);
  void send_getUDTs(const ServiceMetaDataArgs& metadataArgs, const std::vector<SnappyType::type> & types);
  void recv_getUDTs(RowSet& _return);
  void getBestRowIdentifier(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable);
  void send_getBestRowIdentifier(const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable);
  void recv_getBestRowIdentifier(RowSet& _return);
  void fetchActiveConnections(std::vector<ConnectionProperties> & _return, const int64_t connId, const std::string& token);
  void send_fetchActiveConnections(const int64_t connId, const std::string& token);
  void recv_fetchActiveConnections(std::vector<ConnectionProperties> & _return);
  void fetchActiveStatements(std::map<int64_t, std::string> & _return, const int64_t connId, const std::string& token);
  void send_fetchActiveStatements(const int64_t connId, const std::string& token);
  void recv_fetchActiveStatements(std::map<int64_t, std::string> & _return);
  void cancelStatement(const int64_t stmtId, const std::string& token);
  void send_cancelStatement(const int64_t stmtId, const std::string& token);
  void recv_cancelStatement();
  void cancelCurrentStatement(const int64_t connId, const std::string& token);
  void send_cancelCurrentStatement(const int64_t connId, const std::string& token);
  void recv_cancelCurrentStatement();
  void closeResultSet(const int64_t cursorId, const std::string& token);
  void send_closeResultSet(const int64_t cursorId, const std::string& token);
  void recv_closeResultSet();
  void closeStatement(const int64_t stmtId, const std::string& token);
  void send_closeStatement(const int64_t stmtId, const std::string& token);
  void recv_closeStatement();
  void closeConnection(const int64_t connId, const bool closeSocket, const std::string& token);
  void send_closeConnection(const int64_t connId, const bool closeSocket, const std::string& token);
  void bulkClose(const std::vector<EntityId> & entities);
  void send_bulkClose(const std::vector<EntityId> & entities);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SnappyDataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SnappyDataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SnappyDataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getPreferredServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllServersWithPreferredServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openConnection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePrepared(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePreparedUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePreparedQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePreparedBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareAndExecute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_beginTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTransactionAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTransactionAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commitTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rollbackTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNextResultSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBlobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendBlobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendClobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_freeLob(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scrollCursor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeCursorUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startXATransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareXATransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commitXATransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rollbackXATransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_forgetXATransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endXATransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recoverXATransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSchemaMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIndexInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUDTs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBestRowIdentifier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchActiveConnections(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchActiveStatements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelCurrentStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeResultSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeConnection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SnappyDataServiceProcessor(boost::shared_ptr<SnappyDataServiceIf> iface) :
    iface_(iface) {
    processMap_["getPreferredServer"] = &SnappyDataServiceProcessor::process_getPreferredServer;
    processMap_["getAllServersWithPreferredServer"] = &SnappyDataServiceProcessor::process_getAllServersWithPreferredServer;
    processMap_["openConnection"] = &SnappyDataServiceProcessor::process_openConnection;
    processMap_["execute"] = &SnappyDataServiceProcessor::process_execute;
    processMap_["executeUpdate"] = &SnappyDataServiceProcessor::process_executeUpdate;
    processMap_["executeQuery"] = &SnappyDataServiceProcessor::process_executeQuery;
    processMap_["prepareStatement"] = &SnappyDataServiceProcessor::process_prepareStatement;
    processMap_["executePrepared"] = &SnappyDataServiceProcessor::process_executePrepared;
    processMap_["executePreparedUpdate"] = &SnappyDataServiceProcessor::process_executePreparedUpdate;
    processMap_["executePreparedQuery"] = &SnappyDataServiceProcessor::process_executePreparedQuery;
    processMap_["executePreparedBatch"] = &SnappyDataServiceProcessor::process_executePreparedBatch;
    processMap_["prepareAndExecute"] = &SnappyDataServiceProcessor::process_prepareAndExecute;
    processMap_["beginTransaction"] = &SnappyDataServiceProcessor::process_beginTransaction;
    processMap_["setTransactionAttributes"] = &SnappyDataServiceProcessor::process_setTransactionAttributes;
    processMap_["getTransactionAttributes"] = &SnappyDataServiceProcessor::process_getTransactionAttributes;
    processMap_["commitTransaction"] = &SnappyDataServiceProcessor::process_commitTransaction;
    processMap_["rollbackTransaction"] = &SnappyDataServiceProcessor::process_rollbackTransaction;
    processMap_["getNextResultSet"] = &SnappyDataServiceProcessor::process_getNextResultSet;
    processMap_["getBlobChunk"] = &SnappyDataServiceProcessor::process_getBlobChunk;
    processMap_["getClobChunk"] = &SnappyDataServiceProcessor::process_getClobChunk;
    processMap_["sendBlobChunk"] = &SnappyDataServiceProcessor::process_sendBlobChunk;
    processMap_["sendClobChunk"] = &SnappyDataServiceProcessor::process_sendClobChunk;
    processMap_["freeLob"] = &SnappyDataServiceProcessor::process_freeLob;
    processMap_["scrollCursor"] = &SnappyDataServiceProcessor::process_scrollCursor;
    processMap_["executeCursorUpdate"] = &SnappyDataServiceProcessor::process_executeCursorUpdate;
    processMap_["startXATransaction"] = &SnappyDataServiceProcessor::process_startXATransaction;
    processMap_["prepareXATransaction"] = &SnappyDataServiceProcessor::process_prepareXATransaction;
    processMap_["commitXATransaction"] = &SnappyDataServiceProcessor::process_commitXATransaction;
    processMap_["rollbackXATransaction"] = &SnappyDataServiceProcessor::process_rollbackXATransaction;
    processMap_["forgetXATransaction"] = &SnappyDataServiceProcessor::process_forgetXATransaction;
    processMap_["endXATransaction"] = &SnappyDataServiceProcessor::process_endXATransaction;
    processMap_["recoverXATransaction"] = &SnappyDataServiceProcessor::process_recoverXATransaction;
    processMap_["getServiceMetaData"] = &SnappyDataServiceProcessor::process_getServiceMetaData;
    processMap_["getSchemaMetaData"] = &SnappyDataServiceProcessor::process_getSchemaMetaData;
    processMap_["getIndexInfo"] = &SnappyDataServiceProcessor::process_getIndexInfo;
    processMap_["getUDTs"] = &SnappyDataServiceProcessor::process_getUDTs;
    processMap_["getBestRowIdentifier"] = &SnappyDataServiceProcessor::process_getBestRowIdentifier;
    processMap_["fetchActiveConnections"] = &SnappyDataServiceProcessor::process_fetchActiveConnections;
    processMap_["fetchActiveStatements"] = &SnappyDataServiceProcessor::process_fetchActiveStatements;
    processMap_["cancelStatement"] = &SnappyDataServiceProcessor::process_cancelStatement;
    processMap_["cancelCurrentStatement"] = &SnappyDataServiceProcessor::process_cancelCurrentStatement;
    processMap_["closeResultSet"] = &SnappyDataServiceProcessor::process_closeResultSet;
    processMap_["closeStatement"] = &SnappyDataServiceProcessor::process_closeStatement;
    processMap_["closeConnection"] = &SnappyDataServiceProcessor::process_closeConnection;
    processMap_["bulkClose"] = &SnappyDataServiceProcessor::process_bulkClose;
  }

  virtual ~SnappyDataServiceProcessor() {}
};

class SnappyDataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SnappyDataServiceProcessorFactory(const ::boost::shared_ptr< SnappyDataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SnappyDataServiceIfFactory > handlerFactory_;
};

class SnappyDataServiceMultiface : virtual public SnappyDataServiceIf {
 public:
  SnappyDataServiceMultiface(std::vector<boost::shared_ptr<SnappyDataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SnappyDataServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SnappyDataServiceIf> > ifaces_;
  SnappyDataServiceMultiface() {}
  void add(boost::shared_ptr<SnappyDataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getPreferredServer(HostAddress& _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPreferredServer(_return, serverTypes, serverGroups, failedServers);
    }
    ifaces_[i]->getPreferredServer(_return, serverTypes, serverGroups, failedServers);
    return;
  }

  void getAllServersWithPreferredServer(std::vector<HostAddress> & _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllServersWithPreferredServer(_return, serverTypes, serverGroups, failedServers);
    }
    ifaces_[i]->getAllServersWithPreferredServer(_return, serverTypes, serverGroups, failedServers);
    return;
  }

  void openConnection(ConnectionProperties& _return, const OpenConnectionArgs& arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openConnection(_return, arguments);
    }
    ifaces_[i]->openConnection(_return, arguments);
    return;
  }

  void execute(StatementResult& _return, const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute(_return, connId, sql, outputParams, attrs, token);
    }
    ifaces_[i]->execute(_return, connId, sql, outputParams, attrs, token);
    return;
  }

  void executeUpdate(UpdateResult& _return, const int64_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeUpdate(_return, connId, sqls, attrs, token);
    }
    ifaces_[i]->executeUpdate(_return, connId, sqls, attrs, token);
    return;
  }

  void executeQuery(RowSet& _return, const int64_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeQuery(_return, connId, sql, attrs, token);
    }
    ifaces_[i]->executeQuery(_return, connId, sql, attrs, token);
    return;
  }

  void prepareStatement(PrepareResult& _return, const int64_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareStatement(_return, connId, sql, outputParams, attrs, token);
    }
    ifaces_[i]->prepareStatement(_return, connId, sql, outputParams, attrs, token);
    return;
  }

  void executePrepared(StatementResult& _return, const int64_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePrepared(_return, stmtId, params, outputParams, attrs, token);
    }
    ifaces_[i]->executePrepared(_return, stmtId, params, outputParams, attrs, token);
    return;
  }

  void executePreparedUpdate(UpdateResult& _return, const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePreparedUpdate(_return, stmtId, params, attrs, token);
    }
    ifaces_[i]->executePreparedUpdate(_return, stmtId, params, attrs, token);
    return;
  }

  void executePreparedQuery(RowSet& _return, const int64_t stmtId, const Row& params, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePreparedQuery(_return, stmtId, params, attrs, token);
    }
    ifaces_[i]->executePreparedQuery(_return, stmtId, params, attrs, token);
    return;
  }

  void executePreparedBatch(UpdateResult& _return, const int64_t stmtId, const std::vector<Row> & paramsBatch, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePreparedBatch(_return, stmtId, paramsBatch, attrs, token);
    }
    ifaces_[i]->executePreparedBatch(_return, stmtId, paramsBatch, attrs, token);
    return;
  }

  void prepareAndExecute(StatementResult& _return, const int64_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareAndExecute(_return, connId, sql, paramsBatch, outputParams, attrs, token);
    }
    ifaces_[i]->prepareAndExecute(_return, connId, sql, paramsBatch, outputParams, attrs, token);
    return;
  }

  int8_t beginTransaction(const int64_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->beginTransaction(connId, isolationLevel, flags, token);
    }
    return ifaces_[i]->beginTransaction(connId, isolationLevel, flags, token);
  }

  void setTransactionAttributes(const int64_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTransactionAttributes(connId, flags, token);
    }
    ifaces_[i]->setTransactionAttributes(connId, flags, token);
  }

  void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return, const int64_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTransactionAttributes(_return, connId, token);
    }
    ifaces_[i]->getTransactionAttributes(_return, connId, token);
    return;
  }

  void commitTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitTransaction(connId, startNewTransaction, flags, token);
    }
    ifaces_[i]->commitTransaction(connId, startNewTransaction, flags, token);
  }

  void rollbackTransaction(const int64_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rollbackTransaction(connId, startNewTransaction, flags, token);
    }
    ifaces_[i]->rollbackTransaction(connId, startNewTransaction, flags, token);
  }

  void getNextResultSet(RowSet& _return, const int64_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNextResultSet(_return, cursorId, otherResultSetBehaviour, token);
    }
    ifaces_[i]->getNextResultSet(_return, cursorId, otherResultSetBehaviour, token);
    return;
  }

  void getBlobChunk(BlobChunk& _return, const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBlobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    }
    ifaces_[i]->getBlobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    return;
  }

  void getClobChunk(ClobChunk& _return, const int64_t connId, const int64_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getClobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    }
    ifaces_[i]->getClobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    return;
  }

  int64_t sendBlobChunk(const BlobChunk& chunk, const int64_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendBlobChunk(chunk, connId, token);
    }
    return ifaces_[i]->sendBlobChunk(chunk, connId, token);
  }

  int64_t sendClobChunk(const ClobChunk& chunk, const int64_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendClobChunk(chunk, connId, token);
    }
    return ifaces_[i]->sendClobChunk(chunk, connId, token);
  }

  void freeLob(const int64_t connId, const int64_t lobId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->freeLob(connId, lobId, token);
    }
    ifaces_[i]->freeLob(connId, lobId, token);
  }

  void scrollCursor(RowSet& _return, const int64_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scrollCursor(_return, cursorId, offset, offsetIsAbsolute, fetchReverse, fetchSize, token);
    }
    ifaces_[i]->scrollCursor(_return, cursorId, offset, offsetIsAbsolute, fetchReverse, fetchSize, token);
    return;
  }

  void executeCursorUpdate(const int64_t cursorId, const std::vector<CursorUpdateOperation::type> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeCursorUpdate(cursorId, operations, changedRows, changedColumnsList, changedRowIndexes, token);
    }
    ifaces_[i]->executeCursorUpdate(cursorId, operations, changedRows, changedColumnsList, changedRowIndexes, token);
  }

  void startXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t timeoutInSeconds, const int32_t flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startXATransaction(connId, xid, timeoutInSeconds, flags, token);
    }
    ifaces_[i]->startXATransaction(connId, xid, timeoutInSeconds, flags, token);
  }

  int32_t prepareXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareXATransaction(connId, xid, token);
    }
    return ifaces_[i]->prepareXATransaction(connId, xid, token);
  }

  void commitXATransaction(const int64_t connId, const TransactionXid& xid, const bool onePhase, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitXATransaction(connId, xid, onePhase, token);
    }
    ifaces_[i]->commitXATransaction(connId, xid, onePhase, token);
  }

  void rollbackXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rollbackXATransaction(connId, xid, token);
    }
    ifaces_[i]->rollbackXATransaction(connId, xid, token);
  }

  void forgetXATransaction(const int64_t connId, const TransactionXid& xid, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->forgetXATransaction(connId, xid, token);
    }
    ifaces_[i]->forgetXATransaction(connId, xid, token);
  }

  void endXATransaction(const int64_t connId, const TransactionXid& xid, const int32_t flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->endXATransaction(connId, xid, flags, token);
    }
    ifaces_[i]->endXATransaction(connId, xid, flags, token);
  }

  void recoverXATransaction(std::vector<TransactionXid> & _return, const int64_t connId, const int32_t flag, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recoverXATransaction(_return, connId, flag, token);
    }
    ifaces_[i]->recoverXATransaction(_return, connId, flag, token);
    return;
  }

  void getServiceMetaData(ServiceMetaData& _return, const int64_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceMetaData(_return, connId, token);
    }
    ifaces_[i]->getServiceMetaData(_return, connId, token);
    return;
  }

  void getSchemaMetaData(RowSet& _return, const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSchemaMetaData(_return, schemaCall, metadataArgs);
    }
    ifaces_[i]->getSchemaMetaData(_return, schemaCall, metadataArgs);
    return;
  }

  void getIndexInfo(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIndexInfo(_return, metadataArgs, unique, approximate);
    }
    ifaces_[i]->getIndexInfo(_return, metadataArgs, unique, approximate);
    return;
  }

  void getUDTs(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const std::vector<SnappyType::type> & types) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUDTs(_return, metadataArgs, types);
    }
    ifaces_[i]->getUDTs(_return, metadataArgs, types);
    return;
  }

  void getBestRowIdentifier(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBestRowIdentifier(_return, metadataArgs, scope, nullable);
    }
    ifaces_[i]->getBestRowIdentifier(_return, metadataArgs, scope, nullable);
    return;
  }

  void fetchActiveConnections(std::vector<ConnectionProperties> & _return, const int64_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchActiveConnections(_return, connId, token);
    }
    ifaces_[i]->fetchActiveConnections(_return, connId, token);
    return;
  }

  void fetchActiveStatements(std::map<int64_t, std::string> & _return, const int64_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchActiveStatements(_return, connId, token);
    }
    ifaces_[i]->fetchActiveStatements(_return, connId, token);
    return;
  }

  void cancelStatement(const int64_t stmtId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelStatement(stmtId, token);
    }
    ifaces_[i]->cancelStatement(stmtId, token);
  }

  void cancelCurrentStatement(const int64_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelCurrentStatement(connId, token);
    }
    ifaces_[i]->cancelCurrentStatement(connId, token);
  }

  void closeResultSet(const int64_t cursorId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeResultSet(cursorId, token);
    }
    ifaces_[i]->closeResultSet(cursorId, token);
  }

  void closeStatement(const int64_t stmtId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeStatement(stmtId, token);
    }
    ifaces_[i]->closeStatement(stmtId, token);
  }

  void closeConnection(const int64_t connId, const bool closeSocket, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeConnection(connId, closeSocket, token);
    }
    ifaces_[i]->closeConnection(connId, closeSocket, token);
  }

  void bulkClose(const std::vector<EntityId> & entities) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkClose(entities);
    }
    ifaces_[i]->bulkClose(entities);
  }

};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}} // namespace

#endif
