/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_SERVICEMETADATAARGS_H
#define SNAPPYDATA_STRUCT_SERVICEMETADATAARGS_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _ServiceMetaDataArgs__isset {
  _ServiceMetaDataArgs__isset() : schema(false), table(false), tableTypes(false), columnName(false), foreignSchema(false), foreignTable(false), procedureName(false), functionName(false), attributeName(false), typeName(false), typeId(false) {}
  bool schema :1;
  bool table :1;
  bool tableTypes :1;
  bool columnName :1;
  bool foreignSchema :1;
  bool foreignTable :1;
  bool procedureName :1;
  bool functionName :1;
  bool attributeName :1;
  bool typeName :1;
  bool typeId :1;
} _ServiceMetaDataArgs__isset;

class ServiceMetaDataArgs {
 public:

  ServiceMetaDataArgs(const ServiceMetaDataArgs&);
  ServiceMetaDataArgs(ServiceMetaDataArgs&&) noexcept;
  ServiceMetaDataArgs& operator=(const ServiceMetaDataArgs&);
  ServiceMetaDataArgs& operator=(ServiceMetaDataArgs&&) noexcept;
  ServiceMetaDataArgs() : connId(0), driverType(0), token(), schema(), table(), columnName(), foreignSchema(), foreignTable(), procedureName(), functionName(), attributeName(), typeName(), typeId((SnappyType::type)0) {
  }

  virtual ~ServiceMetaDataArgs() noexcept;
  int64_t connId;
  int8_t driverType;
  std::string token;
  std::string schema;
  std::string table;
  std::vector<std::string>  tableTypes;
  std::string columnName;
  std::string foreignSchema;
  std::string foreignTable;
  std::string procedureName;
  std::string functionName;
  std::string attributeName;
  std::string typeName;
  SnappyType::type typeId;

  _ServiceMetaDataArgs__isset __isset;

  void __set_connId(const int64_t val);

  void __set_driverType(const int8_t val);

  void __set_token(const std::string& val);

  void __set_schema(const std::string& val);

  void __set_table(const std::string& val);

  void __set_tableTypes(const std::vector<std::string> & val);

  void __set_columnName(const std::string& val);

  void __set_foreignSchema(const std::string& val);

  void __set_foreignTable(const std::string& val);

  void __set_procedureName(const std::string& val);

  void __set_functionName(const std::string& val);

  void __set_attributeName(const std::string& val);

  void __set_typeName(const std::string& val);

  void __set_typeId(const SnappyType::type val);

  bool operator == (const ServiceMetaDataArgs & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(driverType == rhs.driverType))
      return false;
    if (!(token == rhs.token))
      return false;
    if (__isset.schema != rhs.__isset.schema)
      return false;
    else if (__isset.schema && !(schema == rhs.schema))
      return false;
    if (__isset.table != rhs.__isset.table)
      return false;
    else if (__isset.table && !(table == rhs.table))
      return false;
    if (__isset.tableTypes != rhs.__isset.tableTypes)
      return false;
    else if (__isset.tableTypes && !(tableTypes == rhs.tableTypes))
      return false;
    if (__isset.columnName != rhs.__isset.columnName)
      return false;
    else if (__isset.columnName && !(columnName == rhs.columnName))
      return false;
    if (__isset.foreignSchema != rhs.__isset.foreignSchema)
      return false;
    else if (__isset.foreignSchema && !(foreignSchema == rhs.foreignSchema))
      return false;
    if (__isset.foreignTable != rhs.__isset.foreignTable)
      return false;
    else if (__isset.foreignTable && !(foreignTable == rhs.foreignTable))
      return false;
    if (__isset.procedureName != rhs.__isset.procedureName)
      return false;
    else if (__isset.procedureName && !(procedureName == rhs.procedureName))
      return false;
    if (__isset.functionName != rhs.__isset.functionName)
      return false;
    else if (__isset.functionName && !(functionName == rhs.functionName))
      return false;
    if (__isset.attributeName != rhs.__isset.attributeName)
      return false;
    else if (__isset.attributeName && !(attributeName == rhs.attributeName))
      return false;
    if (__isset.typeName != rhs.__isset.typeName)
      return false;
    else if (__isset.typeName && !(typeName == rhs.typeName))
      return false;
    if (__isset.typeId != rhs.__isset.typeId)
      return false;
    else if (__isset.typeId && !(typeId == rhs.typeId))
      return false;
    return true;
  }
  bool operator != (const ServiceMetaDataArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceMetaDataArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServiceMetaDataArgs &a, ServiceMetaDataArgs &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const ServiceMetaDataArgs& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
