/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_OUTPUTPARAMETER_H
#define SNAPPYDATA_STRUCT_OUTPUTPARAMETER_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _OutputParameter__isset {
  _OutputParameter__isset() : scale(false), typeName(false) {}
  bool scale :1;
  bool typeName :1;
} _OutputParameter__isset;

class OutputParameter {
 public:

  OutputParameter(const OutputParameter&);
  OutputParameter(OutputParameter&&) noexcept;
  OutputParameter& operator=(const OutputParameter&);
  OutputParameter& operator=(OutputParameter&&) noexcept;
  OutputParameter() : type((SnappyType::type)0), scale(0), typeName() {
  }

  virtual ~OutputParameter() noexcept;
  SnappyType::type type;
  int32_t scale;
  std::string typeName;

  _OutputParameter__isset __isset;

  void __set_type(const SnappyType::type val);

  void __set_scale(const int32_t val);

  void __set_typeName(const std::string& val);

  bool operator == (const OutputParameter & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (__isset.scale != rhs.__isset.scale)
      return false;
    else if (__isset.scale && !(scale == rhs.scale))
      return false;
    if (__isset.typeName != rhs.__isset.typeName)
      return false;
    else if (__isset.typeName && !(typeName == rhs.typeName))
      return false;
    return true;
  }
  bool operator != (const OutputParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OutputParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OutputParameter &a, OutputParameter &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const OutputParameter& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
