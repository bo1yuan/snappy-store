/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_TYPES_H
#define SNAPPYDATA_TYPES_H


#include <string>
#include <map>
#include <list>
#include <set>
#include <vector>
#include <exception>
#include <typeinfo>

#include <boost/cstdint.hpp>

namespace apache { namespace thrift { namespace protocol {
  class TProtocol;
}}}


namespace io { namespace snappydata { namespace thrift {

struct SnappyType {
  enum type {
    BOOLEAN = 1,
    TINYINT = 2,
    SMALLINT = 3,
    INTEGER = 4,
    BIGINT = 5,
    FLOAT = 6,
    DOUBLE = 7,
    DECIMAL = 8,
    CHAR = 9,
    VARCHAR = 10,
    LONGVARCHAR = 11,
    DATE = 12,
    TIME = 13,
    TIMESTAMP = 14,
    BINARY = 15,
    VARBINARY = 16,
    LONGVARBINARY = 17,
    BLOB = 18,
    CLOB = 19,
    SQLXML = 20,
    ARRAY = 21,
    MAP = 22,
    STRUCT = 23,
    NULLTYPE = 24,
    JSON = 25,
    JAVA_OBJECT = 26,
    OTHER = 27
  };
};

extern const std::map<int, const char*> _SnappyType_VALUES_TO_NAMES;

struct TransactionAttribute {
  enum type {
    AUTOCOMMIT = 1,
    READ_ONLY_CONNECTION = 2,
    WAITING_MODE = 3,
    DISABLE_BATCHING = 4,
    SYNC_COMMITS = 5
  };
};

extern const std::map<int, const char*> _TransactionAttribute_VALUES_TO_NAMES;

struct RowIdLifetime {
  enum type {
    ROWID_UNSUPPORTED = 1,
    ROWID_VALID_OTHER = 2,
    ROWID_VALID_SESSION = 3,
    ROWID_VALID_TRANSACTION = 4,
    ROWID_VALID_FOREVER = 5
  };
};

extern const std::map<int, const char*> _RowIdLifetime_VALUES_TO_NAMES;

struct ServiceFeature {
  enum type {
    ALL_PROCEDURES_CALLABLE = 1,
    ALL_TABLES_SELECTABLE = 2,
    INTEGRITY_ENHANCEMENT = 3,
    NULLS_SORTED_HIGH = 4,
    NULLS_SORTED_LOW = 5,
    NULLS_SORTED_START = 6,
    NULLS_SORTED_END = 7,
    USES_LOCAL_FILES = 8,
    USES_LOCAL_FILE_PER_TABLE = 9,
    MIXEDCASE_IDENTIFIERS = 10,
    MIXEDCASE_QUOTED_IDENTIFIERS = 11,
    STORES_UPPERCASE_IDENTIFIERS = 12,
    STORES_LOWERCASE_IDENTIFIERS = 13,
    STORES_MIXEDCASE_IDENTIFIERS = 14,
    STORES_UPPERCASE_QUOTED_IDENTIFIERS = 15,
    STORES_LOWERCASE_QUOTED_IDENTIFIERS = 16,
    STORES_MIXEDCASE_QUOTED_IDENTIFIERS = 17,
    ALTER_TABLE_ADD_COLUMN = 18,
    ALTER_TABLE_DROP_COLUMN = 19,
    COLUMN_ALIASING = 20,
    NULL_CONCAT_NON_NULL_IS_NULL = 21,
    CONVERT = 22,
    TABLE_CORRELATION_NAMES = 23,
    TABLE_CORRELATION_NAMES_DIFFERENT = 24,
    ORDER_BY_EXPRESSIONS = 25,
    ORDER_BY_UNRELATED = 26,
    GROUP_BY = 27,
    GROUP_BY_UNRELATED = 28,
    GROUP_BY_BEYOND_SELECT = 29,
    LIKE_ESCAPE = 30,
    MULTIPLE_RESULTSETS = 31,
    MULTIPLE_TRANSACTIONS = 32,
    NON_NULLABLE_COLUMNS = 33,
    SQL_GRAMMAR_MINIMUM = 34,
    SQL_GRAMMAR_CORE = 35,
    SQL_GRAMMAR_EXTENDED = 36,
    SQL_GRAMMAR_ANSI92_ENTRY = 37,
    SQL_GRAMMAR_ANSI92_INTERMEDIATE = 38,
    SQL_GRAMMAR_ANSI92_FULL = 39,
    OUTER_JOINS = 40,
    OUTER_JOINS_FULL = 41,
    OUTER_JOINS_LIMITED = 42,
    SCHEMAS_IN_DMLS = 43,
    SCHEMAS_IN_PROCEDURE_CALLS = 44,
    SCHEMAS_IN_TABLE_DEFS = 45,
    SCHEMAS_IN_INDEX_DEFS = 46,
    SCHEMAS_IN_PRIVILEGE_DEFS = 47,
    AUTOCOMMIT_FAILURE_CLOSES_ALL_RESULTSETS = 48,
    CATALOGS_IN_DMLS = 49,
    CATALOGS_IN_PROCEDURE_CALLS = 50,
    CATALOGS_IN_TABLE_DEFS = 51,
    CATALOGS_IN_INDEX_DEFS = 52,
    CATALOGS_IN_PRIVILEGE_DEFS = 53,
    POSITIONED_DELETE = 54,
    POSITIONED_UPDATE = 55,
    SELECT_FOR_UPDATE = 56,
    STORED_PROCEDURES = 57,
    SUBQUERIES_IN_COMPARISONS = 58,
    SUBQUERIES_IN_EXISTS = 59,
    SUBQUERIES_IN_INS = 60,
    SUBQUERIES_IN_QUANTIFIEDS = 61,
    SUBQUERIES_CORRELATED = 62,
    UNION = 63,
    UNION_ALL = 64,
    OPEN_CURSORS_ACROSS_COMMIT = 65,
    OPEN_CURSORS_ACROSS_ROLLBACK = 66,
    OPEN_STATEMENTS_ACROSS_COMMIT = 67,
    OPEN_STATEMENTS_ACROSS_ROLLBACK = 68,
    MAX_ROWSIZE_INCLUDES_BLOBSIZE = 69,
    TRANSACTIONS = 70,
    TRANSACTIONS_BOTH_DMLS_AND_DDLS = 71,
    TRANSACTIONS_DMLS_ONLY = 72,
    TRANSACTIONS_DDLS_IMPLICIT_COMMIT = 73,
    TRANSACTIONS_DDLS_IGNORED = 74,
    TRANSACTIONS_SAVEPOINTS = 75,
    CALLABLE_NAMED_PARAMETERS = 76,
    CALLABLE_MULTIPLE_OPEN_RESULTSETS = 77,
    GENERATED_KEYS_RETRIEVAL = 78,
    GENERATED_KEYS_ALWAYS_RETURNED = 79,
    BATCH_UPDATES = 80,
    RESULTSET_FORWARD_ONLY = 81,
    RESULTSET_SCROLL_INSENSITIVE = 82,
    RESULTSET_SCROLL_SENSITIVE = 83,
    RESULTSET_HOLDABILITY_CLOSE_CURSORS_AT_COMMIT = 84,
    RESULTSET_HOLDABILITY_HOLD_CURSORS_OVER_COMMIT = 85,
    LOB_UPDATES_COPY = 86,
    STATEMENT_POOLING = 87,
    STORED_FUNCTIONS_USING_CALL = 88
  };
};

extern const std::map<int, const char*> _ServiceFeature_VALUES_TO_NAMES;

struct ServiceFeatureParameterized {
  enum type {
    TRANSACTIONS_SUPPORT_ISOLATION = 1,
    RESULTSET_TYPE = 2,
    RESULTSET_CONCURRENCY_READ_ONLY = 3,
    RESULTSET_CONCURRENCY_UPDATABLE = 4,
    RESULTSET_OWN_UPDATES_VISIBLE = 5,
    RESULTSET_OWN_DELETES_VISIBLE = 6,
    RESULTSET_OWN_INSERTS_VISIBLE = 7,
    RESULTSET_OTHERS_UPDATES_VISIBLE = 8,
    RESULTSET_OTHERS_DELETES_VISIBLE = 9,
    RESULTSET_OTHERS_INSERTS_VISIBLE = 10,
    RESULTSET_UPDATES_DETECTED = 11,
    RESULTSET_DELETES_DETECTED = 12,
    RESULTSET_INSERTS_DETECTED = 13
  };
};

extern const std::map<int, const char*> _ServiceFeatureParameterized_VALUES_TO_NAMES;

struct ServiceMetaDataCall {
  enum type {
    CATALOGS = 1,
    SCHEMAS = 2,
    TABLES = 3,
    TABLETYPES = 4,
    COLUMNS = 5,
    TABLEPRIVILEGES = 6,
    COLUMNPRIVILEGES = 7,
    PRIMARYKEYS = 8,
    IMPORTEDKEYS = 9,
    EXPORTEDKEYS = 10,
    CROSSREFERENCE = 11,
    PROCEDURES = 12,
    FUNCTIONS = 13,
    PROCEDURECOLUMNS = 14,
    FUNCTIONCOLUMNS = 15,
    ATTRIBUTES = 16,
    TYPEINFO = 17,
    SUPERTYPES = 18,
    SUPERTABLES = 19,
    VERSIONCOLUMNS = 20,
    CLIENTINFOPROPS = 21,
    PSEUDOCOLUMNS = 22
  };
};

extern const std::map<int, const char*> _ServiceMetaDataCall_VALUES_TO_NAMES;

struct SecurityMechanism {
  enum type {
    PLAIN = 1,
    DIFFIE_HELLMAN = 2
  };
};

extern const std::map<int, const char*> _SecurityMechanism_VALUES_TO_NAMES;

struct ServerType {
  enum type {
    DRDA = 1,
    THRIFT_LOCATOR_CP = 2,
    THRIFT_LOCATOR_BP = 3,
    THRIFT_LOCATOR_CP_SSL = 4,
    THRIFT_LOCATOR_BP_SSL = 5,
    THRIFT_SNAPPY_CP = 6,
    THRIFT_SNAPPY_BP = 7,
    THRIFT_SNAPPY_CP_SSL = 8,
    THRIFT_SNAPPY_BP_SSL = 9
  };
};

extern const std::map<int, const char*> _ServerType_VALUES_TO_NAMES;

struct CursorUpdateOperation {
  enum type {
    UPDATE_OP = 1,
    INSERT_OP = 2,
    DELETE_OP = 3
  };
};

extern const std::map<int, const char*> _CursorUpdateOperation_VALUES_TO_NAMES;

class Decimal;

class BlobChunk;

class ClobChunk;

class TransactionXid;

class ServiceMetaData;

class ServiceMetaDataArgs;

class OpenConnectionArgs;

class ConnectionProperties;

class HostAddress;

class SnappyExceptionData;

class SnappyException;

class StatementAttrs;

class ColumnValue;

class ColumnDescriptor;

class Row;

class OutputParameter;

class RowSet;

class PrepareResult;

class UpdateResult;

class StatementResult;

class EntityId;

}}} // namespace

#endif
