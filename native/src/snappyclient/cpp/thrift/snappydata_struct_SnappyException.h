/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_SNAPPYEXCEPTION_H
#define SNAPPYDATA_STRUCT_SNAPPYEXCEPTION_H

#include <thrift/TApplicationException.h>

#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _SnappyException__isset {
  _SnappyException__isset() : nextExceptions(false) {}
  bool nextExceptions :1;
} _SnappyException__isset;

class SnappyException : public ::apache::thrift::TException {
 public:

  SnappyException(const SnappyException&);
  SnappyException(SnappyException&&) noexcept;
  SnappyException& operator=(const SnappyException&);
  SnappyException& operator=(SnappyException&&) noexcept;
  SnappyException() : serverInfo() {
  }

  virtual ~SnappyException() noexcept;
  SnappyExceptionData exceptionData;
  std::string serverInfo;
  std::vector<SnappyExceptionData>  nextExceptions;

  _SnappyException__isset __isset;

  void __set_exceptionData(const SnappyExceptionData& val);

  void __set_serverInfo(const std::string& val);

  void __set_nextExceptions(const std::vector<SnappyExceptionData> & val);

  bool operator == (const SnappyException & rhs) const
  {
    if (!(exceptionData == rhs.exceptionData))
      return false;
    if (!(serverInfo == rhs.serverInfo))
      return false;
    if (__isset.nextExceptions != rhs.__isset.nextExceptions)
      return false;
    else if (__isset.nextExceptions && !(nextExceptions == rhs.nextExceptions))
      return false;
    return true;
  }
  bool operator != (const SnappyException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SnappyException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(SnappyException &a, SnappyException &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const SnappyException& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
