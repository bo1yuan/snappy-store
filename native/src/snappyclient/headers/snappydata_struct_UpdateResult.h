/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_UPDATERESULT_H
#define SNAPPYDATA_STRUCT_UPDATERESULT_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_TransactionXid.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"
#include "snappydata_struct_ConnectionProperties.h"
#include "snappydata_struct_HostAddress.h"
#include "snappydata_struct_SnappyExceptionData.h"
#include "snappydata_struct_StatementAttrs.h"
#include "snappydata_struct_ColumnValue.h"
#include "snappydata_struct_ColumnDescriptor.h"
#include "snappydata_struct_Row.h"
#include "snappydata_struct_OutputParameter.h"
#include "snappydata_struct_RowSet.h"
#include "snappydata_struct_PrepareResult.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _UpdateResult__isset {
  _UpdateResult__isset() : updateCount(false), batchUpdateCounts(false), generatedKeys(false), newDefaultSchema(false), warnings(false) {}
  bool updateCount :1;
  bool batchUpdateCounts :1;
  bool generatedKeys :1;
  bool newDefaultSchema :1;
  bool warnings :1;
} _UpdateResult__isset;

class UpdateResult {
 public:

  UpdateResult(const UpdateResult&);
  UpdateResult(UpdateResult&&) noexcept;
  UpdateResult& operator=(const UpdateResult&);
  UpdateResult& operator=(UpdateResult&&) noexcept;
  UpdateResult() : updateCount(0), newDefaultSchema() {
  }

  virtual ~UpdateResult() noexcept;
  int32_t updateCount;
  std::vector<int32_t>  batchUpdateCounts;
  RowSet generatedKeys;
  std::string newDefaultSchema;
  SnappyExceptionData warnings;

  _UpdateResult__isset __isset;

  void __set_updateCount(const int32_t val);

  void __set_batchUpdateCounts(const std::vector<int32_t> & val);

  void __set_generatedKeys(const RowSet& val);

  void __set_newDefaultSchema(const std::string& val);

  void __set_warnings(const SnappyExceptionData& val);

  bool operator == (const UpdateResult & rhs) const
  {
    if (__isset.updateCount != rhs.__isset.updateCount)
      return false;
    else if (__isset.updateCount && !(updateCount == rhs.updateCount))
      return false;
    if (__isset.batchUpdateCounts != rhs.__isset.batchUpdateCounts)
      return false;
    else if (__isset.batchUpdateCounts && !(batchUpdateCounts == rhs.batchUpdateCounts))
      return false;
    if (__isset.generatedKeys != rhs.__isset.generatedKeys)
      return false;
    else if (__isset.generatedKeys && !(generatedKeys == rhs.generatedKeys))
      return false;
    if (__isset.newDefaultSchema != rhs.__isset.newDefaultSchema)
      return false;
    else if (__isset.newDefaultSchema && !(newDefaultSchema == rhs.newDefaultSchema))
      return false;
    if (__isset.warnings != rhs.__isset.warnings)
      return false;
    else if (__isset.warnings && !(warnings == rhs.warnings))
      return false;
    return true;
  }
  bool operator != (const UpdateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateResult &a, UpdateResult &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const UpdateResult& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
