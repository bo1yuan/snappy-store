/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_ColumnDescriptor.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


ColumnDescriptor::~ColumnDescriptor() noexcept {
}


void ColumnDescriptor::__set_type(const SnappyType::type val) {
  this->type = val;
}

void ColumnDescriptor::__set_precision(const int16_t val) {
  this->precision = val;
}

void ColumnDescriptor::__set_scale(const int16_t val) {
  this->scale = val;
__isset.scale = true;
}

void ColumnDescriptor::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void ColumnDescriptor::__set_fullTableName(const std::string& val) {
  this->fullTableName = val;
__isset.fullTableName = true;
}

void ColumnDescriptor::__set_updatable(const bool val) {
  this->updatable = val;
__isset.updatable = true;
}

void ColumnDescriptor::__set_definitelyUpdatable(const bool val) {
  this->definitelyUpdatable = val;
__isset.definitelyUpdatable = true;
}

void ColumnDescriptor::__set_nullable(const bool val) {
  this->nullable = val;
__isset.nullable = true;
}

void ColumnDescriptor::__set_autoIncrement(const bool val) {
  this->autoIncrement = val;
__isset.autoIncrement = true;
}

void ColumnDescriptor::__set_parameterIn(const bool val) {
  this->parameterIn = val;
__isset.parameterIn = true;
}

void ColumnDescriptor::__set_parameterOut(const bool val) {
  this->parameterOut = val;
__isset.parameterOut = true;
}

void ColumnDescriptor::__set_elementTypes(const std::vector<SnappyType::type> & val) {
  this->elementTypes = val;
__isset.elementTypes = true;
}

void ColumnDescriptor::__set_udtTypeAndClassName(const std::string& val) {
  this->udtTypeAndClassName = val;
__isset.udtTypeAndClassName = true;
}

uint32_t ColumnDescriptor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_precision = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast202;
          xfer += iprot->readI32(ecast202);
          this->type = (SnappyType::type)ecast202;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->precision);
          isset_precision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->scale);
          this->__isset.scale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullTableName);
          this->__isset.fullTableName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->updatable);
          this->__isset.updatable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->definitelyUpdatable);
          this->__isset.definitelyUpdatable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->nullable);
          this->__isset.nullable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->autoIncrement);
          this->__isset.autoIncrement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parameterIn);
          this->__isset.parameterIn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parameterOut);
          this->__isset.parameterOut = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elementTypes.clear();
            uint32_t _size203;
            ::apache::thrift::protocol::TType _etype206;
            xfer += iprot->readListBegin(_etype206, _size203);
            this->elementTypes.resize(_size203);
            uint32_t _i207;
            for (_i207 = 0; _i207 < _size203; ++_i207)
            {
              int32_t ecast208;
              xfer += iprot->readI32(ecast208);
              this->elementTypes[_i207] = (SnappyType::type)ecast208;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.elementTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->udtTypeAndClassName);
          this->__isset.udtTypeAndClassName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_precision)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnDescriptor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ColumnDescriptor");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("precision", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->precision);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.scale) {
    xfer += oprot->writeFieldBegin("scale", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->scale);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fullTableName) {
    xfer += oprot->writeFieldBegin("fullTableName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->fullTableName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatable) {
    xfer += oprot->writeFieldBegin("updatable", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->updatable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.definitelyUpdatable) {
    xfer += oprot->writeFieldBegin("definitelyUpdatable", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->definitelyUpdatable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nullable) {
    xfer += oprot->writeFieldBegin("nullable", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->nullable);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.autoIncrement) {
    xfer += oprot->writeFieldBegin("autoIncrement", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->autoIncrement);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parameterIn) {
    xfer += oprot->writeFieldBegin("parameterIn", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->parameterIn);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parameterOut) {
    xfer += oprot->writeFieldBegin("parameterOut", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->parameterOut);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.elementTypes) {
    xfer += oprot->writeFieldBegin("elementTypes", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->elementTypes.size()));
      std::vector<SnappyType::type> ::const_iterator _iter209;
      for (_iter209 = this->elementTypes.begin(); _iter209 != this->elementTypes.end(); ++_iter209)
      {
        xfer += oprot->writeI32((int32_t)(*_iter209));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.udtTypeAndClassName) {
    xfer += oprot->writeFieldBegin("udtTypeAndClassName", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->udtTypeAndClassName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnDescriptor &a, ColumnDescriptor &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.type, b.type);
  swap(a.precision, b.precision);
  swap(a.scale, b.scale);
  swap(a.name, b.name);
  swap(a.fullTableName, b.fullTableName);
  swap(a.updatable, b.updatable);
  swap(a.definitelyUpdatable, b.definitelyUpdatable);
  swap(a.nullable, b.nullable);
  swap(a.autoIncrement, b.autoIncrement);
  swap(a.parameterIn, b.parameterIn);
  swap(a.parameterOut, b.parameterOut);
  swap(a.elementTypes, b.elementTypes);
  swap(a.udtTypeAndClassName, b.udtTypeAndClassName);
  swap(a.__isset, b.__isset);
}

ColumnDescriptor::ColumnDescriptor(const ColumnDescriptor& other210) {
  type = other210.type;
  precision = other210.precision;
  scale = other210.scale;
  name = other210.name;
  fullTableName = other210.fullTableName;
  updatable = other210.updatable;
  definitelyUpdatable = other210.definitelyUpdatable;
  nullable = other210.nullable;
  autoIncrement = other210.autoIncrement;
  parameterIn = other210.parameterIn;
  parameterOut = other210.parameterOut;
  elementTypes = other210.elementTypes;
  udtTypeAndClassName = other210.udtTypeAndClassName;
  __isset = other210.__isset;
}
ColumnDescriptor::ColumnDescriptor( ColumnDescriptor&& other211) noexcept {
  type = std::move(other211.type);
  precision = std::move(other211.precision);
  scale = std::move(other211.scale);
  name = std::move(other211.name);
  fullTableName = std::move(other211.fullTableName);
  updatable = std::move(other211.updatable);
  definitelyUpdatable = std::move(other211.definitelyUpdatable);
  nullable = std::move(other211.nullable);
  autoIncrement = std::move(other211.autoIncrement);
  parameterIn = std::move(other211.parameterIn);
  parameterOut = std::move(other211.parameterOut);
  elementTypes = std::move(other211.elementTypes);
  udtTypeAndClassName = std::move(other211.udtTypeAndClassName);
  __isset = std::move(other211.__isset);
}
ColumnDescriptor& ColumnDescriptor::operator=(const ColumnDescriptor& other212) {
  type = other212.type;
  precision = other212.precision;
  scale = other212.scale;
  name = other212.name;
  fullTableName = other212.fullTableName;
  updatable = other212.updatable;
  definitelyUpdatable = other212.definitelyUpdatable;
  nullable = other212.nullable;
  autoIncrement = other212.autoIncrement;
  parameterIn = other212.parameterIn;
  parameterOut = other212.parameterOut;
  elementTypes = other212.elementTypes;
  udtTypeAndClassName = other212.udtTypeAndClassName;
  __isset = other212.__isset;
  return *this;
}
ColumnDescriptor& ColumnDescriptor::operator=(ColumnDescriptor&& other213) noexcept {
  type = std::move(other213.type);
  precision = std::move(other213.precision);
  scale = std::move(other213.scale);
  name = std::move(other213.name);
  fullTableName = std::move(other213.fullTableName);
  updatable = std::move(other213.updatable);
  definitelyUpdatable = std::move(other213.definitelyUpdatable);
  nullable = std::move(other213.nullable);
  autoIncrement = std::move(other213.autoIncrement);
  parameterIn = std::move(other213.parameterIn);
  parameterOut = std::move(other213.parameterOut);
  elementTypes = std::move(other213.elementTypes);
  udtTypeAndClassName = std::move(other213.udtTypeAndClassName);
  __isset = std::move(other213.__isset);
  return *this;
}
void ColumnDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnDescriptor(";
  out << "type=" << to_string(type);
  out << ", " << "precision=" << to_string(precision);
  out << ", " << "scale="; (__isset.scale ? (out << to_string(scale)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "fullTableName="; (__isset.fullTableName ? (out << to_string(fullTableName)) : (out << "<null>"));
  out << ", " << "updatable="; (__isset.updatable ? (out << to_string(updatable)) : (out << "<null>"));
  out << ", " << "definitelyUpdatable="; (__isset.definitelyUpdatable ? (out << to_string(definitelyUpdatable)) : (out << "<null>"));
  out << ", " << "nullable="; (__isset.nullable ? (out << to_string(nullable)) : (out << "<null>"));
  out << ", " << "autoIncrement="; (__isset.autoIncrement ? (out << to_string(autoIncrement)) : (out << "<null>"));
  out << ", " << "parameterIn="; (__isset.parameterIn ? (out << to_string(parameterIn)) : (out << "<null>"));
  out << ", " << "parameterOut="; (__isset.parameterOut ? (out << to_string(parameterOut)) : (out << "<null>"));
  out << ", " << "elementTypes="; (__isset.elementTypes ? (out << to_string(elementTypes)) : (out << "<null>"));
  out << ", " << "udtTypeAndClassName="; (__isset.udtTypeAndClassName ? (out << to_string(udtTypeAndClassName)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
