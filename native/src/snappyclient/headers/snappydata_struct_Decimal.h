/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_DECIMAL_H
#define SNAPPYDATA_STRUCT_DECIMAL_H



#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {


class Decimal {
 public:

  Decimal(const Decimal&);
  Decimal(Decimal&&) noexcept;
  Decimal& operator=(const Decimal&);
  Decimal& operator=(Decimal&&) noexcept;
  Decimal() : signum(0), scale(0), magnitude() {
  }

  virtual ~Decimal() noexcept;
  int8_t signum;
  int32_t scale;
  std::string magnitude;

  void __set_signum(const int8_t val);

  void __set_scale(const int32_t val);

  void __set_magnitude(const std::string& val);

  bool operator == (const Decimal & rhs) const
  {
    if (!(signum == rhs.signum))
      return false;
    if (!(scale == rhs.scale))
      return false;
    if (!(magnitude == rhs.magnitude))
      return false;
    return true;
  }
  bool operator != (const Decimal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Decimal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Decimal &a, Decimal &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const Decimal& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
