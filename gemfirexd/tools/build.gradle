/*
 * Copyright (c) 2016 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

plugins {
  id 'ca.coglinc.javacc' version '2.3.1'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

artifacts {
  archives packageTests
}

dependencies {
  provided project(subprojectBase + 'gemfirexd-core')
  compile project(subprojectBase + 'gemfirexd-hibernate')

  // ddlutils dependencies
  compile 'commons-beanutils:commons-beanutils:1.9.2'
  compile 'commons-codec:commons-codec:1.10'
  compile 'commons-collections:commons-collections:3.2.2'
  compile 'commons-configuration:commons-configuration:1.10'
  compile 'commons-pool:commons-pool:1.6'
  compile 'commons-dbcp:commons-dbcp:1.4'
  compile "jline:jline:${jlineVersion}"

  // use dunit support from snappydata
  if (subprojectBase == ':') {
    testCompile 'io.snappydata:dunit:1.0.4-3'
  } else {
    testCompile project(':dunit')
  }

  testCompile project(subprojectBase + 'gemfirexd-client')
  testCompile project(subprojectBase + 'gemfire-junit')

  provided files("${System.getProperty('java.home')}/../lib/tools.jar")
  provided 'xalan:xalan:2.7.2'
  provided 'xalan:serializer:2.7.2'
  provided "com.pivotal:pxf-api:${pxfVersion}"

  provided "org.apache.spark:spark-unsafe_${scalaBinaryVersion}:${sparkVersion}"
  provided "org.apache.hadoop:hadoop-annotations:${hadoopVersion}"
  provided "org.apache.hadoop:hadoop-auth:${hadoopVersion}"
  provided "org.apache.hadoop:hadoop-common:${hadoopVersion}"
  provided "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}"
  provided "org.apache.hadoop:hadoop-mapreduce-client-core:${hadoopVersion}"
  provided "com.google.protobuf:protobuf-java:${protobufVersion}"
  provided "com.sun.jersey:jersey-core:${sunJerseyVersion}"
  provided "com.sun.jersey:jersey-server:${sunJerseyVersion}"
  provided "com.sun.jersey:jersey-servlet:${sunJerseyVersion}"
  provided "org.mortbay.jetty:jetty-util:${hadoopJettyVersion}"
  provided "org.mortbay.jetty:jetty:${hadoopJettyVersion}"
  provided "org.mortbay.jetty:jetty-util:${hadoopJettyVersion}"
  provided "org.eclipse.jetty:jetty-http:${jettyVersion}"
  provided "org.eclipse.jetty:jetty-io:${jettyVersion}"
  provided "org.eclipse.jetty:jetty-security:${jettyVersion}"
  provided "org.eclipse.jetty:jetty-server:${jettyVersion}"
  provided "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  provided "org.eclipse.jetty:jetty-util:${jettyVersion}"
  provided "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
  provided "org.eclipse.jetty:jetty-xml:${jettyVersion}"
  provided "com.google.code.findbugs:jsr305:${jsr305Version}"

  testCompile "org.apache.hadoop:hadoop-common:${hadoopVersion}:tests"
  testCompile "org.apache.hadoop:hadoop-hdfs:${hadoopVersion}:tests"
  testCompile "org.apache.ant:ant-launcher:${antVersion}"
  testCompile "org.apache.derby:derby:${derbyVersion}"
  testCompile "org.apache.derby:derbynet:${derbyVersion}"
  testRuntime "org.apache.derby:derbytools:${derbyVersion}"
  testRuntime "org.apache.derby:derbyclient:${derbyVersion}"
  testCompile 'oro:oro:2.0.8'
  testCompile 'dom4j:dom4j:1.6.1'
  // Embedded Apache Directory Server for LDAP tests
  testCompile(group: 'org.apache.directory.server', name: 'apacheds-all', version: '1.5.7') {
    exclude(group: 'org.apache.directory.shared', module: 'shared-ldap-schema')
  }

  testRuntime project(subprojectBase + 'gemfirexd-core')
  testRuntime "org.apache.spark:spark-unsafe_${scalaBinaryVersion}:${sparkVersion}"
}

// move javacc output directory to a place where IDEA can easily register
def javaccOut = 'src/generated/javacc'
compileJavacc {
  arguments = [ grammar_encoding: 'UTF-8' ]
  outputDirectory = file("${projectDir}/${javaccOut}")
}

task deleteGenerated(type: Delete) {
  delete javaccOut
}
clean.dependsOn deleteGenerated

sourceSets.main.java.srcDirs = [ 'src/main/java', javaccOut, 'src/ddlutils/java' ]
sourceSets.test.java.srcDirs = [ 'src/test/java', 'src/testing/java', 'src/dunit/java',
                                 'src/demo/java', 'src/test-ddlutils/java' ]

task generatePropertiesFiles(dependsOn: 'processResources') {
  def infoDir = file("${buildDir}/resources/main/com/pivotal/gemfirexd/internal/info")
  outputs.file "${infoDir}/tools.properties"
  inputs.dir compileJava.destinationDir

  doLast {
    println('Creating tools properties')
    derbyProps.put('gemfirexd.product.technology.name', "${DERBY_NAME} Tools")
    writeProperties(infoDir, 'tools.properties', COPYRIGHT, derbyProps)
  }
}
compileJava.dependsOn generatePropertiesFiles

archivesBaseName = 'snappydata-store-tools'

shadowJar {
  dependsOn jar
  baseName = 'snappydata-tools'
  classifier = ''

  mergeServiceFiles()
}
