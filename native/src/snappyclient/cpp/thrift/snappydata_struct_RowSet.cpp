/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_RowSet.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


RowSet::~RowSet() noexcept {
}


void RowSet::__set_rows(const std::vector<Row> & val) {
  this->rows = val;
}

void RowSet::__set_flags(const int8_t val) {
  this->flags = val;
}

void RowSet::__set_cursorId(const int64_t val) {
  this->cursorId = val;
}

void RowSet::__set_statementId(const int64_t val) {
  this->statementId = val;
}

void RowSet::__set_connId(const int64_t val) {
  this->connId = val;
}

void RowSet::__set_token(const std::string& val) {
  this->token = val;
__isset.token = true;
}

void RowSet::__set_source(const HostAddress& val) {
  this->source = val;
__isset.source = true;
}

void RowSet::__set_offset(const int32_t val) {
  this->offset = val;
__isset.offset = true;
}

void RowSet::__set_metadata(const std::vector<ColumnDescriptor> & val) {
  this->metadata = val;
__isset.metadata = true;
}

void RowSet::__set_cursorName(const std::string& val) {
  this->cursorName = val;
__isset.cursorName = true;
}

void RowSet::__set_warnings(const SnappyExceptionData& val) {
  this->warnings = val;
__isset.warnings = true;
}

void RowSet::__set_rowIdsForUpdateOrDelete(const std::vector<int64_t> & val) {
  this->rowIdsForUpdateOrDelete = val;
__isset.rowIdsForUpdateOrDelete = true;
}

uint32_t RowSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rows = false;
  bool isset_flags = false;
  bool isset_cursorId = false;
  bool isset_statementId = false;
  bool isset_connId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rows.clear();
            uint32_t _size229;
            ::apache::thrift::protocol::TType _etype232;
            xfer += iprot->readListBegin(_etype232, _size229);
            this->rows.resize(_size229);
            uint32_t _i233;
            for (_i233 = 0; _i233 < _size229; ++_i233)
            {
              xfer += this->rows[_i233].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flags);
          isset_flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cursorId);
          isset_cursorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->statementId);
          isset_statementId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->connId);
          isset_connId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->metadata.clear();
            uint32_t _size234;
            ::apache::thrift::protocol::TType _etype237;
            xfer += iprot->readListBegin(_etype237, _size234);
            this->metadata.resize(_size234);
            uint32_t _i238;
            for (_i238 = 0; _i238 < _size234; ++_i238)
            {
              xfer += this->metadata[_i238].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cursorName);
          this->__isset.cursorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->warnings.read(iprot);
          this->__isset.warnings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rowIdsForUpdateOrDelete.clear();
            uint32_t _size239;
            ::apache::thrift::protocol::TType _etype242;
            xfer += iprot->readListBegin(_etype242, _size239);
            this->rowIdsForUpdateOrDelete.resize(_size239);
            uint32_t _i243;
            for (_i243 = 0; _i243 < _size239; ++_i243)
            {
              xfer += iprot->readI64(this->rowIdsForUpdateOrDelete[_i243]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rowIdsForUpdateOrDelete = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_flags)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cursorId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_statementId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_connId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RowSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RowSet");

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rows.size()));
    std::vector<Row> ::const_iterator _iter244;
    for (_iter244 = this->rows.begin(); _iter244 != this->rows.end(); ++_iter244)
    {
      xfer += (*_iter244).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cursorId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->cursorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statementId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->statementId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("connId", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->connId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.token) {
    xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeBinary(this->token);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source) {
    xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->source.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset) {
    xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->offset);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metadata) {
    xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->metadata.size()));
      std::vector<ColumnDescriptor> ::const_iterator _iter245;
      for (_iter245 = this->metadata.begin(); _iter245 != this->metadata.end(); ++_iter245)
      {
        xfer += (*_iter245).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cursorName) {
    xfer += oprot->writeFieldBegin("cursorName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->cursorName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.warnings) {
    xfer += oprot->writeFieldBegin("warnings", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->warnings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rowIdsForUpdateOrDelete) {
    xfer += oprot->writeFieldBegin("rowIdsForUpdateOrDelete", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->rowIdsForUpdateOrDelete.size()));
      std::vector<int64_t> ::const_iterator _iter246;
      for (_iter246 = this->rowIdsForUpdateOrDelete.begin(); _iter246 != this->rowIdsForUpdateOrDelete.end(); ++_iter246)
      {
        xfer += oprot->writeI64((*_iter246));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RowSet &a, RowSet &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.rows, b.rows);
  swap(a.flags, b.flags);
  swap(a.cursorId, b.cursorId);
  swap(a.statementId, b.statementId);
  swap(a.connId, b.connId);
  swap(a.token, b.token);
  swap(a.source, b.source);
  swap(a.offset, b.offset);
  swap(a.metadata, b.metadata);
  swap(a.cursorName, b.cursorName);
  swap(a.warnings, b.warnings);
  swap(a.rowIdsForUpdateOrDelete, b.rowIdsForUpdateOrDelete);
  swap(a.__isset, b.__isset);
}

RowSet::RowSet(const RowSet& other247) {
  rows = other247.rows;
  flags = other247.flags;
  cursorId = other247.cursorId;
  statementId = other247.statementId;
  connId = other247.connId;
  token = other247.token;
  source = other247.source;
  offset = other247.offset;
  metadata = other247.metadata;
  cursorName = other247.cursorName;
  warnings = other247.warnings;
  rowIdsForUpdateOrDelete = other247.rowIdsForUpdateOrDelete;
  __isset = other247.__isset;
}
RowSet::RowSet( RowSet&& other248) noexcept {
  rows = std::move(other248.rows);
  flags = std::move(other248.flags);
  cursorId = std::move(other248.cursorId);
  statementId = std::move(other248.statementId);
  connId = std::move(other248.connId);
  token = std::move(other248.token);
  source = std::move(other248.source);
  offset = std::move(other248.offset);
  metadata = std::move(other248.metadata);
  cursorName = std::move(other248.cursorName);
  warnings = std::move(other248.warnings);
  rowIdsForUpdateOrDelete = std::move(other248.rowIdsForUpdateOrDelete);
  __isset = std::move(other248.__isset);
}
RowSet& RowSet::operator=(const RowSet& other249) {
  rows = other249.rows;
  flags = other249.flags;
  cursorId = other249.cursorId;
  statementId = other249.statementId;
  connId = other249.connId;
  token = other249.token;
  source = other249.source;
  offset = other249.offset;
  metadata = other249.metadata;
  cursorName = other249.cursorName;
  warnings = other249.warnings;
  rowIdsForUpdateOrDelete = other249.rowIdsForUpdateOrDelete;
  __isset = other249.__isset;
  return *this;
}
RowSet& RowSet::operator=(RowSet&& other250) noexcept {
  rows = std::move(other250.rows);
  flags = std::move(other250.flags);
  cursorId = std::move(other250.cursorId);
  statementId = std::move(other250.statementId);
  connId = std::move(other250.connId);
  token = std::move(other250.token);
  source = std::move(other250.source);
  offset = std::move(other250.offset);
  metadata = std::move(other250.metadata);
  cursorName = std::move(other250.cursorName);
  warnings = std::move(other250.warnings);
  rowIdsForUpdateOrDelete = std::move(other250.rowIdsForUpdateOrDelete);
  __isset = std::move(other250.__isset);
  return *this;
}
void RowSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RowSet(";
  out << "rows=" << to_string(rows);
  out << ", " << "flags=" << to_string(flags);
  out << ", " << "cursorId=" << to_string(cursorId);
  out << ", " << "statementId=" << to_string(statementId);
  out << ", " << "connId=" << to_string(connId);
  out << ", " << "token="; (__isset.token ? (out << to_string(token)) : (out << "<null>"));
  out << ", " << "source="; (__isset.source ? (out << to_string(source)) : (out << "<null>"));
  out << ", " << "offset="; (__isset.offset ? (out << to_string(offset)) : (out << "<null>"));
  out << ", " << "metadata="; (__isset.metadata ? (out << to_string(metadata)) : (out << "<null>"));
  out << ", " << "cursorName="; (__isset.cursorName ? (out << to_string(cursorName)) : (out << "<null>"));
  out << ", " << "warnings="; (__isset.warnings ? (out << to_string(warnings)) : (out << "<null>"));
  out << ", " << "rowIdsForUpdateOrDelete="; (__isset.rowIdsForUpdateOrDelete ? (out << to_string(rowIdsForUpdateOrDelete)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
